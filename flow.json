[
    {
        "id": "692c798b6f9c61de",
        "type": "tab",
        "label": "AIR-CR",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "10f19757a09301a8",
        "type": "group",
        "z": "692c798b6f9c61de",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "d83cd52bb6d220f3",
            "6a874cf39f52a41c",
            "44eead080f6ff893",
            "2c0e5a1f061ca6fb",
            "60f424913e84a261",
            "0ec93d1beaa5a9e4",
            "6e20a4e8faad6ec9",
            "3e7f179e8060b80f",
            "222ca6d9f33aad97",
            "e5a3acd7c9ec31f5",
            "04c1d5dbdd8f38ac",
            "d7d095cc69820735",
            "f3c02ad6c6c9e647",
            "7eac56fc6cc91668",
            "3eee40e5c11d9b4a",
            "35d5c1041e47bc34",
            "532a28a158a27751"
        ],
        "x": 2634,
        "y": 3199,
        "w": 1112,
        "h": 402
    },
    {
        "id": "d658b6c01a4e944c",
        "type": "group",
        "z": "692c798b6f9c61de",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "5aa9ba6b290b2fba",
            "becebef23edcbbf9",
            "c83813488be715e7",
            "60fc553922b7b14e",
            "b6369bb4f44f1bb6",
            "3bc21ed43f4c6e09",
            "c8de1c77f62aa5e1",
            "71582f197379231e",
            "7bbd818e1ecdb3bd",
            "aab5cc2445afa1e9",
            "d8678eed801b4b21",
            "06889269c967e362",
            "43d817f891639128",
            "0367491b11713191",
            "67fc5cf6173b0259",
            "24d296461956b528",
            "cf8bb1c46db881f8"
        ],
        "x": 2634,
        "y": 2779,
        "w": 1152,
        "h": 402
    },
    {
        "id": "b2d513ab7bca448d",
        "type": "group",
        "z": "692c798b6f9c61de",
        "style": {
            "stroke": "#999999",
            "stroke-opacity": "1",
            "fill": "none",
            "fill-opacity": "1",
            "label": true,
            "label-position": "nw",
            "color": "#a4a4a4"
        },
        "nodes": [
            "a607e57b9c8d8cdd",
            "84d7a118ddd9842f",
            "5876e97090ffded2",
            "4a42fef97bd379c2",
            "297191ec56ab0272",
            "d8697b4c53aa26a1",
            "d0c523e32a8ea14f",
            "1dc6ecb687b4c702",
            "4d74c64a6d551fbf",
            "c195fb1af7d90e90",
            "3c691a45025ba009",
            "8d0f58b9725145dc",
            "061aecc325f2ccf3",
            "b2474e59834ac54b",
            "00ecd6dbee19221f",
            "9511360cabc09665",
            "b083bea11642642c",
            "1decd6fb7be79a57",
            "ddab9916254d4a0e",
            "ebf4caecba2c3b0f",
            "b21a19bb0acbfa9c",
            "b60a07a5f5df2db6",
            "c8960adebc938996",
            "341cca91a1fdb94a",
            "2f40703481bf226e",
            "5c869c44f8db9da9",
            "b417a70c3198d0ed",
            "3bdcb9943af21e2d",
            "3ea8d5ce08c43c52",
            "3546195198d65dd9",
            "081099f2b9125117",
            "0ada4d37954ca264",
            "0b438b611b9e4e71",
            "0b04359872cec0ac",
            "234a95ed4ea353eb",
            "85dc3035ed5f5a74",
            "6010b0a9f46e8715",
            "dbea2a03332b56f1",
            "f1522977cf923a4f",
            "fb853ec8a9a2aa56",
            "a6acf6655b8e75ce",
            "fae441eff2294cea",
            "b69c4fad23abed38",
            "69a80012105d56fc",
            "2f92527cf6cd24ad"
        ],
        "x": 1254,
        "y": 2779,
        "w": 1352,
        "h": 782
    },
    {
        "id": "79737e067a3af084",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt://broker.emqx.io",
        "port": "1883",
        "clientid": "",
        "autoConnect": false,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "64d879d816cdb063",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "b76cefdaf9bc6c8b",
        "type": "ui_tab",
        "name": "AIR-CR",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "91a9ce4bbf4bb377",
        "type": "ui_group",
        "name": "Advanced_settings",
        "tab": "b76cefdaf9bc6c8b",
        "order": 4,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "fc491a4cada0492f",
        "type": "ui_group",
        "name": "SIdebar",
        "tab": "b76cefdaf9bc6c8b",
        "order": 1,
        "disp": false,
        "width": 4,
        "collapse": false,
        "className": ""
    },
    {
        "id": "78fe50a055b65ca2",
        "type": "ui_group",
        "name": "Control",
        "tab": "b76cefdaf9bc6c8b",
        "order": 8,
        "disp": false,
        "width": 30,
        "collapse": false,
        "className": ""
    },
    {
        "id": "61a80ff8ccd60942",
        "type": "ui_group",
        "name": "Header",
        "tab": "b76cefdaf9bc6c8b",
        "order": 2,
        "disp": false,
        "width": 30,
        "collapse": false,
        "className": ""
    },
    {
        "id": "08691a1abdc449f7",
        "type": "ui_group",
        "name": "Connection",
        "tab": "b76cefdaf9bc6c8b",
        "order": 3,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c642776b64f7474d",
        "type": "ui_group",
        "name": "r0",
        "tab": "b76cefdaf9bc6c8b",
        "order": 5,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "01eefd96a559eaf3",
        "type": "ui_group",
        "name": "r1",
        "tab": "b76cefdaf9bc6c8b",
        "order": 6,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6cbd42c7b26f3143",
        "type": "ui_group",
        "name": "submit",
        "tab": "b76cefdaf9bc6c8b",
        "order": 7,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "523171b4c91e1d14",
        "type": "ui_group",
        "name": "schedule",
        "tab": "b76cefdaf9bc6c8b",
        "order": 9,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b5b06fdb86579748",
        "type": "ui_group",
        "name": "Simple_settings",
        "tab": "b76cefdaf9bc6c8b",
        "order": 10,
        "disp": false,
        "width": "30",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8eb73aed81b1ce55",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 2,
        "width": 4,
        "height": 1
    },
    {
        "id": "48a86e4dce9b0b42",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 6,
        "width": 4,
        "height": 1
    },
    {
        "id": "5a6583130fdea4f8",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 7,
        "width": 4,
        "height": 1
    },
    {
        "id": "21dc6e02408d880b",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 8,
        "width": 4,
        "height": 1
    },
    {
        "id": "2818d008ac8ca8d1",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 9,
        "width": 4,
        "height": 1
    },
    {
        "id": "ab951ea339f3e59f",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 10,
        "width": 4,
        "height": 1
    },
    {
        "id": "3d8afa079e3653f7",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 11,
        "width": 4,
        "height": 1
    },
    {
        "id": "feda268d25cfb8e9",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 12,
        "width": 4,
        "height": 1
    },
    {
        "id": "e59ebfef3d11becb",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 13,
        "width": 4,
        "height": 1
    },
    {
        "id": "0176db9f1050d99b",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 14,
        "width": 4,
        "height": 1
    },
    {
        "id": "9f9afc95df0293b0",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 15,
        "width": 4,
        "height": 1
    },
    {
        "id": "51985212dc57a8f7",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 17,
        "width": 4,
        "height": 1
    },
    {
        "id": "bc203b66f7c6c6b9",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 18,
        "width": 4,
        "height": 1
    },
    {
        "id": "8eed25802239a5a4",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 19,
        "width": 4,
        "height": 1
    },
    {
        "id": "37a568718bcf484f",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 20,
        "width": 4,
        "height": 1
    },
    {
        "id": "ecec0d04852f4c7d",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 21,
        "width": 4,
        "height": 1
    },
    {
        "id": "4d03faada3e2c2b6",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 22,
        "width": 4,
        "height": 1
    },
    {
        "id": "0a0f349677eededb",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 23,
        "width": 4,
        "height": 1
    },
    {
        "id": "ba25be05fce5879a",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 24,
        "width": 4,
        "height": 1
    },
    {
        "id": "a7d7e03420dd0b86",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 25,
        "width": 4,
        "height": 1
    },
    {
        "id": "854a321a3cc4836c",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 26,
        "width": 4,
        "height": 1
    },
    {
        "id": "7269713f25a572cb",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 27,
        "width": 4,
        "height": 1
    },
    {
        "id": "09067527907bc0cd",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 28,
        "width": 4,
        "height": 1
    },
    {
        "id": "9d8e785edfb80797",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 29,
        "width": 4,
        "height": 1
    },
    {
        "id": "dc4542776437afe0",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 30,
        "width": 4,
        "height": 1
    },
    {
        "id": "47beadee85775a1f",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 31,
        "width": 4,
        "height": 1
    },
    {
        "id": "0b7974fd9ce0da10",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 32,
        "width": 4,
        "height": 1
    },
    {
        "id": "ac3e3a498839b4e6",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 33,
        "width": 4,
        "height": 1
    },
    {
        "id": "be46ceaefbfca1fd",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 34,
        "width": 4,
        "height": 1
    },
    {
        "id": "f8e786eb1aab4ea3",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 35,
        "width": 4,
        "height": 1
    },
    {
        "id": "446ebccc653207b5",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 36,
        "width": 4,
        "height": 1
    },
    {
        "id": "7c119bab09a1fbe7",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 37,
        "width": 4,
        "height": 1
    },
    {
        "id": "fdea79b7b3cc6487",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 38,
        "width": 4,
        "height": 1
    },
    {
        "id": "b94be273df8f400e",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 39,
        "width": 4,
        "height": 1
    },
    {
        "id": "db12024c121966c4",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 40,
        "width": 4,
        "height": 1
    },
    {
        "id": "790eef41381850cb",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 41,
        "width": 4,
        "height": 1
    },
    {
        "id": "e52b440d6bc7d013",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "fc491a4cada0492f",
        "order": 42,
        "width": 4,
        "height": 1
    },
    {
        "id": "27c67db8bcb74811",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "08691a1abdc449f7",
        "order": 9,
        "width": 14,
        "height": 1
    },
    {
        "id": "141efa7753379155",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "08691a1abdc449f7",
        "order": 10,
        "width": 14,
        "height": 1
    },
    {
        "id": "6e7d76138e8fce45",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "08691a1abdc449f7",
        "order": 13,
        "width": 14,
        "height": 1
    },
    {
        "id": "2dddf88e2db237b2",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "91a9ce4bbf4bb377",
        "order": 5,
        "width": 30,
        "height": 1
    },
    {
        "id": "ac64e372c7f21977",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "91a9ce4bbf4bb377",
        "order": 15,
        "width": 10,
        "height": 1
    },
    {
        "id": "4098b2d4331ef2d5",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "91a9ce4bbf4bb377",
        "order": 16,
        "width": 10,
        "height": 1
    },
    {
        "id": "3f12abc55595635e",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "91a9ce4bbf4bb377",
        "order": 17,
        "width": 30,
        "height": 1
    },
    {
        "id": "25ba53987668a5d3",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "91a9ce4bbf4bb377",
        "order": 21,
        "width": 10,
        "height": 1
    },
    {
        "id": "e98c9e594fcb1119",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "91a9ce4bbf4bb377",
        "order": 22,
        "width": 10,
        "height": 1
    },
    {
        "id": "7a901b8e26571777",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "91a9ce4bbf4bb377",
        "order": 23,
        "width": 30,
        "height": 1
    },
    {
        "id": "a3c2be684b619dd1",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "91a9ce4bbf4bb377",
        "order": 28,
        "width": 30,
        "height": 1
    },
    {
        "id": "01b4ee02913fb83e",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "c642776b64f7474d",
        "order": 1,
        "width": 30,
        "height": 1
    },
    {
        "id": "e9b9230569c78ac5",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "c642776b64f7474d",
        "order": 11,
        "width": 10,
        "height": 1
    },
    {
        "id": "eaa4f5b38adf3c5a",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "c642776b64f7474d",
        "order": 12,
        "width": 10,
        "height": 1
    },
    {
        "id": "e80b1d601b73492e",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "01eefd96a559eaf3",
        "order": 1,
        "width": 30,
        "height": 1
    },
    {
        "id": "bccc9abdd2904ed2",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "01eefd96a559eaf3",
        "order": 11,
        "width": 10,
        "height": 1
    },
    {
        "id": "511976e01cd8c6d7",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "01eefd96a559eaf3",
        "order": 12,
        "width": 10,
        "height": 1
    },
    {
        "id": "08e133876469898d",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "6cbd42c7b26f3143",
        "order": 1,
        "width": 5,
        "height": 1
    },
    {
        "id": "59679c95c3ba3143",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "6cbd42c7b26f3143",
        "order": 3,
        "width": 5,
        "height": 1
    },
    {
        "id": "5903754e9c4f4e3f",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "78fe50a055b65ca2",
        "order": 3,
        "width": 16,
        "height": 1
    },
    {
        "id": "de72e66db74f34e1",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "78fe50a055b65ca2",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "9e90f6d24502036b",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "78fe50a055b65ca2",
        "order": 7,
        "width": 2,
        "height": 1
    },
    {
        "id": "ceb0d001d3765b80",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "78fe50a055b65ca2",
        "order": 10,
        "width": 2,
        "height": 1
    },
    {
        "id": "b1decfa98867c037",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "8f9a880f3dba6fc7",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 4,
        "width": 6,
        "height": 1
    },
    {
        "id": "7923f14567a164a2",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "d562c6fff32deddd",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "c7c9629acdc43080",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 9,
        "width": 2,
        "height": 1
    },
    {
        "id": "5a566142a802389d",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 11,
        "width": 2,
        "height": 1
    },
    {
        "id": "a27a0fce81fe3207",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 13,
        "width": 2,
        "height": 1
    },
    {
        "id": "78fcf3ecd235dbad",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 15,
        "width": 2,
        "height": 1
    },
    {
        "id": "b85944280c566aaf",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 17,
        "width": 1,
        "height": 1
    },
    {
        "id": "c56965d07729abe6",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 19,
        "width": 2,
        "height": 1
    },
    {
        "id": "9d87e8af17d68e91",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 20,
        "width": 1,
        "height": 1
    },
    {
        "id": "8afc4be8eb28212f",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 21,
        "width": 19,
        "height": 1
    },
    {
        "id": "27effa16c1a8bfec",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 23,
        "width": 8,
        "height": 1
    },
    {
        "id": "7d317e293b2ac462",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 26,
        "width": 1,
        "height": 1
    },
    {
        "id": "8afce138707396b6",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 27,
        "width": 19,
        "height": 1
    },
    {
        "id": "6756c460ced47963",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 28,
        "width": 1,
        "height": 1
    },
    {
        "id": "4169d4ccbc43d988",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 29,
        "width": 30,
        "height": 1
    },
    {
        "id": "d5503acfe30344e9",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 30,
        "width": 30,
        "height": 1
    },
    {
        "id": "9e559d075a0ce179",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 32,
        "width": 2,
        "height": 1
    },
    {
        "id": "f52309e58eaa7640",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 34,
        "width": 8,
        "height": 1
    },
    {
        "id": "abe7ac719e36aee4",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 35,
        "width": 30,
        "height": 1
    },
    {
        "id": "54224d2af1a02f96",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 37,
        "width": 2,
        "height": 1
    },
    {
        "id": "7b238651d72ec867",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 39,
        "width": 2,
        "height": 1
    },
    {
        "id": "c2ef98bed7ac6b20",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 40,
        "width": 30,
        "height": 1
    },
    {
        "id": "26020f465199bcc5",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 42,
        "width": 2,
        "height": 1
    },
    {
        "id": "08a2c8b2ace66907",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 44,
        "width": 2,
        "height": 1
    },
    {
        "id": "26d1b93b724e8cd9",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 46,
        "width": 2,
        "height": 1
    },
    {
        "id": "3f80e8b1645ee4e2",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 48,
        "width": 2,
        "height": 1
    },
    {
        "id": "d7ef8ed571d33552",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 50,
        "width": 1,
        "height": 1
    },
    {
        "id": "67cab569c0b61115",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 52,
        "width": 2,
        "height": 1
    },
    {
        "id": "b506af26985b72c3",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 53,
        "width": 1,
        "height": 1
    },
    {
        "id": "a9be1a5c8b86a001",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 54,
        "width": 2,
        "height": 1
    },
    {
        "id": "9332fd475590e571",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 55,
        "width": 30,
        "height": 1
    },
    {
        "id": "d3b78e92b83f0740",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 56,
        "width": 30,
        "height": 1
    },
    {
        "id": "577c9a02e4249b05",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 58,
        "width": 19,
        "height": 1
    },
    {
        "id": "ea62e1bf337b5087",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 60,
        "width": 19,
        "height": 1
    },
    {
        "id": "65e334c9ceed3507",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 61,
        "width": 19,
        "height": 1
    },
    {
        "id": "b9d949c7304dfebc",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "523171b4c91e1d14",
        "order": 63,
        "width": 19,
        "height": 1
    },
    {
        "id": "78fe3ca339dd35cb",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "b5b06fdb86579748",
        "order": 2,
        "width": 2,
        "height": 1
    },
    {
        "id": "8a73a0f28aa0388f",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "b5b06fdb86579748",
        "order": 4,
        "width": 30,
        "height": 1
    },
    {
        "id": "5c07a0fe52c1f8a7",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "b5b06fdb86579748",
        "order": 5,
        "width": 30,
        "height": 1
    },
    {
        "id": "e3d908e726a2c4bc",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "b5b06fdb86579748",
        "order": 9,
        "width": 30,
        "height": 1
    },
    {
        "id": "4e61b08a991c008a",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "b5b06fdb86579748",
        "order": 10,
        "width": 30,
        "height": 1
    },
    {
        "id": "219721bbe075dfb8",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "b5b06fdb86579748",
        "order": 17,
        "width": 30,
        "height": 1
    },
    {
        "id": "2611108b397e9e20",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "b5b06fdb86579748",
        "order": 25,
        "width": 30,
        "height": 1
    },
    {
        "id": "27a34a9905249462",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "b5b06fdb86579748",
        "order": 30,
        "width": 30,
        "height": 1
    },
    {
        "id": "8d861fdcda6539e2",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "b5b06fdb86579748",
        "order": 34,
        "width": 10,
        "height": 1
    },
    {
        "id": "449192858aa0c278",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "b5b06fdb86579748",
        "order": 35,
        "width": 10,
        "height": 1
    },
    {
        "id": "7c2893e55836f18c",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "b5b06fdb86579748",
        "order": 36,
        "width": 30,
        "height": 1
    },
    {
        "id": "fcf5b70679a2fcaf",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "b5b06fdb86579748",
        "order": 40,
        "width": 30,
        "height": 1
    },
    {
        "id": "91330e89e1b63760",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "b5b06fdb86579748",
        "order": 41,
        "width": 6,
        "height": 1
    },
    {
        "id": "1b0e3e2042e9b014",
        "type": "ui_spacer",
        "z": "692c798b6f9c61de",
        "name": "spacer",
        "group": "b5b06fdb86579748",
        "order": 43,
        "width": 4,
        "height": 1
    },
    {
        "id": "f35f7ebd59ad5459",
        "type": "ui_ui_control",
        "z": "692c798b6f9c61de",
        "name": "",
        "events": "change",
        "x": 4360,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "ec7459b197b9c702",
        "type": "ui_button",
        "z": "692c798b6f9c61de",
        "d": true,
        "name": "Advanced Settings",
        "group": "fc491a4cada0492f",
        "order": 16,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Advanced Settings",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "settings_btn",
        "icon": "",
        "payload": "{\"group\":{\"hide\":[\"AIR-CR_Control\",\"AIR-CR_Connection\",\"AIR-CR_Simple_settings\",\"AIR-CR_schedule\"],\"show\":[\"AIR-CR_Advanced_settings\",\"AIR-CR_r0\",\"AIR-CR_r1\",\"AIR-CR_submit\"]}}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 3970,
        "y": 1620,
        "wires": [
            [
                "f35f7ebd59ad5459"
            ]
        ]
    },
    {
        "id": "cc2c84ed43d311b3",
        "type": "ui_button",
        "z": "692c798b6f9c61de",
        "name": "Control panel",
        "group": "fc491a4cada0492f",
        "order": 5,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Control panel",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "control_btn",
        "icon": "",
        "payload": "{\"group\":{\"hide\":[\"AIR-CR_Advanced_settings\",\"AIR-CR_Simple_settings\",\"AIR-CR_r1\",\"AIR-CR_r0\",\"AIR-CR_submit\",\"AIR-CR_Connection\",\"AIR-CR_schedule\"],\"show\":[\"AIR-CR_Control\"]}}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 3990,
        "y": 1500,
        "wires": [
            [
                "f35f7ebd59ad5459"
            ]
        ]
    },
    {
        "id": "6d7ac608b771c09f",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "dashboardInit",
        "func": "msg.payload = {}\n\nmsg.payload.group = {\n    \"hide\": [\"AIR-CR_Advanced_settings\", \"AIR-CR_Simple_settings\",\"AIR-CR_Control\", \"AIR-CR_r0\", \"AIR-CR_r1\", \"AIR-CR_submit\", \"AIR-CR_schedule\"],\n    \"show\": [\"AIR-CR_Connection\"]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4060,
        "y": 1340,
        "wires": [
            [
                "f35f7ebd59ad5459"
            ]
        ]
    },
    {
        "id": "88f9361be756f961",
        "type": "ui_button",
        "z": "692c798b6f9c61de",
        "name": "Forced Unlock",
        "group": "78fe50a055b65ca2",
        "order": 8,
        "width": 14,
        "height": 1,
        "passthru": false,
        "label": "Forced Unlock",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "open_btn",
        "icon": "",
        "payload": "unlocked",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 4060,
        "y": 3280,
        "wires": [
            [
                "d6765f34883a6bc1"
            ]
        ]
    },
    {
        "id": "7bda40ae5d0419f4",
        "type": "ui_button",
        "z": "692c798b6f9c61de",
        "name": "Locked",
        "group": "78fe50a055b65ca2",
        "order": 5,
        "width": 14,
        "height": 1,
        "passthru": false,
        "label": "Locked",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "close_btn",
        "icon": "",
        "payload": "locked",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 4040,
        "y": 3340,
        "wires": [
            [
                "d6765f34883a6bc1"
            ]
        ]
    },
    {
        "id": "0b88f25bf185f363",
        "type": "ui_button",
        "z": "692c798b6f9c61de",
        "name": "Credential",
        "group": "78fe50a055b65ca2",
        "order": 11,
        "width": 14,
        "height": 1,
        "passthru": false,
        "label": "Credential",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "creds_btn",
        "icon": "",
        "payload": "credential",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 4050,
        "y": 3400,
        "wires": [
            [
                "d6765f34883a6bc1"
            ]
        ]
    },
    {
        "id": "d6765f34883a6bc1",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "sendMqttMessage",
        "func": "\nlet userCreds = global.get('userCreds');\nlet globalTopic = userCreds.location + \"/\" + userCreds.device_id + \"/\"\nlet control_cpIdx = global.get('control_cpIdx');\n\n\nlet msgWrapper = {}\nmsgWrapper.operator = \"SetAccessMode\"\nmsgWrapper.session_id = \"0\"\nmsgWrapper.message_id = Math.floor(Math.random() * 1692797271182).toString();\n\nmsgWrapper.info = {}\nmsgWrapper.info.Control_point_idx = control_cpIdx\nmsgWrapper.info.Access_mode = msg.payload\n\nmsg.payload = msgWrapper\nmsg.topic = globalTopic + \"Operate\" + \"/\"\n\nglobal.set('messageId', msgWrapper.message_id)\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4310,
        "y": 3340,
        "wires": [
            [
                "8ceb1c5b5fb6e7d7"
            ]
        ]
    },
    {
        "id": "8ceb1c5b5fb6e7d7",
        "type": "mqtt out",
        "z": "692c798b6f9c61de",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "79737e067a3af084",
        "x": 4510,
        "y": 3400,
        "wires": []
    },
    {
        "id": "1cbac974e1dbb470",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "setCpIdx",
        "func": "global.set('control_cpIdx', msg.payload)\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4260,
        "y": 3180,
        "wires": [
            []
        ]
    },
    {
        "id": "5e83605c1e8b1345",
        "type": "ui_button",
        "z": "692c798b6f9c61de",
        "name": "Single Exit",
        "group": "78fe50a055b65ca2",
        "order": 9,
        "width": 14,
        "height": 1,
        "passthru": false,
        "label": "Single Exit",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "1",
        "payloadType": "num",
        "topic": "",
        "topicType": "str",
        "x": 4050,
        "y": 3480,
        "wires": [
            [
                "dfbd635c1022b71c"
            ]
        ]
    },
    {
        "id": "804d8ac17c0ee538",
        "type": "ui_button",
        "z": "692c798b6f9c61de",
        "name": "SingleEntry",
        "group": "78fe50a055b65ca2",
        "order": 6,
        "width": 14,
        "height": 1,
        "passthru": false,
        "label": "SIngle Entry",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "0",
        "payloadType": "num",
        "topic": "",
        "topicType": "str",
        "x": 4050,
        "y": 3540,
        "wires": [
            [
                "dfbd635c1022b71c"
            ]
        ]
    },
    {
        "id": "dfbd635c1022b71c",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "sendMqttMessage",
        "func": "let userCreds = global.get('userCreds');\nlet globalTopic = userCreds.location + \"/\" + userCreds.device_id + \"/\"\nlet control_cpIdx = global.get('control_cpIdx');\n\n\nlet msgWrapper = {}\nmsgWrapper.operator = \"Single_pass\"\nmsgWrapper.session_id = \"0\"\nmsgWrapper.message_id = Math.floor(Math.random() * 1692797271182).toString();\n\nmsgWrapper.info = {}\nmsgWrapper.info.Control_point_idx = control_cpIdx\nmsgWrapper.info.Direction = msg.payload\n\nmsg.payload = msgWrapper\nmsg.topic = globalTopic + \"Operate\" + \"/\"\n\nglobal.set('messageId', msgWrapper.message_id)\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4290,
        "y": 3480,
        "wires": [
            [
                "8ceb1c5b5fb6e7d7"
            ]
        ]
    },
    {
        "id": "bcb697e124c3a95e",
        "type": "ui_button",
        "z": "692c798b6f9c61de",
        "name": "Connection options",
        "group": "fc491a4cada0492f",
        "order": 1,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Connection options",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"group\":{\"hide\":[\"AIR-CR_Advanced_settings\",\"AIR-CR_r0\",\"AIR-CR_r1\",\"AIR-CR_submit\",\"AIR-CR_Control\",\"AIR-CR_Simple_settings\",\"AIR-CR_schedule\"],\"show\":[\"AIR-CR_Connection\"]}}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 4010,
        "y": 1460,
        "wires": [
            [
                "f35f7ebd59ad5459"
            ]
        ]
    },
    {
        "id": "c5f7a3022f0a71d4",
        "type": "ui_template",
        "z": "692c798b6f9c61de",
        "group": "78fe50a055b65ca2",
        "name": "Control panel",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>\n    #controlPanelHeader{\n        text-align: center;\n        color: #0094CE;\n        font-size: 30px;\n        font-weight: 700\n    }\n</style>\n\n\n<div id=\"controlPanelHeader\">\n    Control panel\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 4050,
        "y": 3180,
        "wires": [
            []
        ]
    },
    {
        "id": "0c769e6742acebb0",
        "type": "ui_text_input",
        "z": "692c798b6f9c61de",
        "name": "Host",
        "label": "Host",
        "tooltip": "",
        "group": "08691a1abdc449f7",
        "order": 2,
        "width": 8,
        "height": 2,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "host",
        "sendOnBlur": true,
        "className": "text_input",
        "topicType": "str",
        "x": 930,
        "y": 1200,
        "wires": [
            [
                "7184e0269f48110f"
            ]
        ]
    },
    {
        "id": "a122ea34e40556e4",
        "type": "ui_text_input",
        "z": "692c798b6f9c61de",
        "name": "Port",
        "label": "Port",
        "tooltip": "",
        "group": "08691a1abdc449f7",
        "order": 3,
        "width": 8,
        "height": 2,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "port",
        "sendOnBlur": true,
        "className": "text_input",
        "topicType": "str",
        "x": 930,
        "y": 1240,
        "wires": [
            [
                "7184e0269f48110f"
            ]
        ]
    },
    {
        "id": "ad3a558f7afdccbf",
        "type": "ui_text_input",
        "z": "692c798b6f9c61de",
        "name": "Username",
        "label": "Username",
        "tooltip": "",
        "group": "08691a1abdc449f7",
        "order": 5,
        "width": 8,
        "height": 2,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "username",
        "sendOnBlur": true,
        "className": "text_input",
        "topicType": "str",
        "x": 910,
        "y": 1280,
        "wires": [
            [
                "7184e0269f48110f"
            ]
        ]
    },
    {
        "id": "58d2480b2eff322c",
        "type": "ui_text_input",
        "z": "692c798b6f9c61de",
        "name": "Password",
        "label": "Password",
        "tooltip": "",
        "group": "08691a1abdc449f7",
        "order": 6,
        "width": 8,
        "height": 2,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "password",
        "sendOnBlur": true,
        "className": "text_input",
        "topicType": "str",
        "x": 920,
        "y": 1320,
        "wires": [
            [
                "7184e0269f48110f"
            ]
        ]
    },
    {
        "id": "7184e0269f48110f",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "setMqttSettings",
        "func": "\n// initialise the counter to 0 if it doesn't exist already\nlet mqtt_settings = global.get('mqtt_settings') || {};\n\nmqtt_settings = Object.assign(mqtt_settings, { [msg.topic]: msg.payload })\n\nglobal.set('mqtt_settings', mqtt_settings)\n\n// msg.payload = inputSettings\n\nreturn mqtt_settings;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "61dda110cb9d7f8a",
        "type": "status",
        "z": "692c798b6f9c61de",
        "name": "",
        "scope": [
            "9e5fe1c3fe6f0503"
        ],
        "x": 140,
        "y": 1180,
        "wires": [
            [
                "642df87e4871a1c4",
                "84cef9c2bb45ee64"
            ]
        ]
    },
    {
        "id": "642df87e4871a1c4",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "setEnabledStates",
        "func": "if (msg.status.text === \"start\") {\n    msg.enabled = true\n} else if (msg.status.text === \"node-red:common.status.connecting\") {\n    msg.enabled = false\n} else if (msg.status.text === \"node-red:common.status.connected\") {\n    msg.enabled = false\n} else if (msg.status.text === \"node-red:common.status.disconnected\") {\n    msg.enabled = true\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1200,
        "wires": [
            [
                "5c0f4a3dd94ecbbf",
                "afdc7c0ee76e4a47",
                "99ae61b360355f68",
                "f74a6a22480189cc",
                "53da7a211480283e",
                "45dadb28c9284a55",
                "9711d2389203650e"
            ]
        ]
    },
    {
        "id": "6c8acdd459e657eb",
        "type": "ui_toast",
        "z": "692c798b6f9c61de",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Ack info",
        "x": 2120,
        "y": 880,
        "wires": []
    },
    {
        "id": "9e5fe1c3fe6f0503",
        "type": "mqtt in",
        "z": "692c798b6f9c61de",
        "name": "",
        "topic": "",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "79737e067a3af084",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 1,
        "x": 1350,
        "y": 860,
        "wires": [
            [
                "4c30f9b315530f2a"
            ]
        ]
    },
    {
        "id": "2b2d85fbc2c145a5",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "subscribe",
        "func": "let tempUserCreds = RED.util.cloneMessage(global.get('tempUserCreds'))\nglobal.set('userCreds', tempUserCreds)\nlet globalTopic = tempUserCreds.location + \"/\" + tempUserCreds.device_id + \"/\"\nmsg.action = \"subscribe\"\nmsg.topic = globalTopic + \"#\"\n\n\n\nlet obj = {}\nobj.payload = {}\n\nif (tempUserCreds.location === \"\" || tempUserCreds.device_id === null) {\n    obj.payload.deviceAddr = \"Device address: N/A\"\n} else {\n    obj.payload.deviceAddr = \"Device address: \" + tempUserCreds.location + \"/\" + tempUserCreds.device_id + \"/\"\n}\n\n\n\nreturn [msg, obj]\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 880,
        "wires": [
            [
                "9e5fe1c3fe6f0503"
            ],
            [
                "6ad93d3e94e2fe69"
            ]
        ]
    },
    {
        "id": "32d53427bced070c",
        "type": "ui_table",
        "z": "692c798b6f9c61de",
        "group": "78fe50a055b65ca2",
        "name": "",
        "order": 12,
        "width": 30,
        "height": 12,
        "columns": [
            {
                "field": "Group",
                "title": "Event Type",
                "width": "11%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Ctp_idx",
                "title": "Control point name",
                "width": "11%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Event_id",
                "title": "Event description",
                "width": "30%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Direction",
                "title": "Direction",
                "width": "7%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Key_id",
                "title": "Key_id",
                "width": "8%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Key_HEX",
                "title": "Key (hex)",
                "width": "13%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "time",
                "title": "Time",
                "width": "20%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 2010,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "4c30f9b315530f2a",
        "type": "switch",
        "z": "692c798b6f9c61de",
        "name": "",
        "property": "payload.operator",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Event",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SetAccessMode-Ack",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Single_pass-Ack",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SetCtpDoor-Ack",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DelCtpDoor-Ack",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SetDateTime-Ack",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SetRd-Ack",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SetSdlDaily-Ack",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DelSdlDaily-Ack",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SetCardKeys-Ack",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EndCardKey-Ack",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 11,
        "x": 1530,
        "y": 860,
        "wires": [
            [
                "160ef0c3c55613af"
            ],
            [
                "95c8a2503541cab9"
            ],
            [
                "881c61e409196bd8"
            ],
            [
                "aad987ee2a0c4f2c"
            ],
            [
                "c61ecea6ed433bf2"
            ],
            [
                "4eec54e042c9d037"
            ],
            [
                "2c9973e0b952c269"
            ],
            [
                "b34a359c80292f28"
            ],
            [
                "746bb3e6d6acd877"
            ],
            [
                "32e87a6a3d7b9fae"
            ],
            [
                "f681efedd61143dc"
            ]
        ]
    },
    {
        "id": "160ef0c3c55613af",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "handleEvent",
        "func": "let eventList = {\n    \"1\": \"Access denied: Antipassback violation\",\n    \"2\": \"Access denied: A second cardholder is required\",\n    \"3\": \"Access denied: Denied by access rule\",\n    \"4\": \"Access denied: Max occupancy reached\",\n    \"5\": \"Access denied: Expired credential\",\n    \"6\": \"Access denied: First-person-in rule supervisor absent\",\n    \"7\": \"Access denied: Inactive cardholder\",\n    \"8\": \"Access denied: Interlock\",\n    \"9\": \"Access denied: Invalid PIN\",\n    \"10\": \"Access denied: Invalid RFID\",\n    \"11\": \"Access denied: Invalid BT PHONE\",\n    \"12\": \"Access denied: Invalid LINKEY\",\n    \"13\": \"Access denied: Invalid VIKEY\",\n    \"14\": \"Access denied: Lost credential\",\n    \"15\": \"Access denied: Stolen credential\",\n    \"16\": \"Access denied: Unknown credential\",\n    \"17\": \"Access denied: Out of schedule\",\n    \"18\": \"Antipassback violation\",\n    \"19\": \"Antipassback violation forgiven\",\n    \"20\": \"Access denied: Double credential requred \",\n    \"21\": \"Access denied: Double credential timeout\",\n    \"22\": \"Entry assumed\",\n    \"23\": \"Entry detected\",\n    \"24\": \"Access granted\",\n    \"25\": \"Entry\",\n    \"26\": \"Exit\",\n\n\n    \"116\": \"Door closed\",\n    \"117\": \"Door opened\",\n    \"118\": \"Door forced open\",\n    \"119\": \"Door open too long\",\n    \"120\": \"Request to exit\",\n    \"121\": \"Door manually unlocked\",\n    \"122\": \"Door manually locked\",\n    \"123\": \"Door manually Scheduled mode\",\n    \"124\": \"Door locked\",\n    \"125\": \"Door unlocked\"\n}\n\nlet groupList = {\n    0: \"System event\",\n    1: \"System alarm\",\n    2: \"Cardholder event\",\n    3: \"Cardholder alarm\",\n    4: \"User event\"\n}\n\nlet directionList = {\n    \"-1\": \"Entry/Exit\",\n    \"0\": \"Entry\",\n    \"1\": \"Exit\"\n}\n\nfunction constructDirection(key) {\n    return key + \": \" + directionList[key]\n}\n\nfunction constructGroup(key) {\n    return key + \": \" + groupList[key]\n}\n\nfunction constructOutput(key) {\n    console.log(key)\n    console.log(groupList[key])\n    \n    return key + \": \" + eventList[key]\n}\n\nfunction getFormattedTime(unixTime) {\n    let months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    let d = new Date(unixTime * 1000);\n    let day = days[d.getDay()];\n    let hr = d.getHours();\n    let min = d.getMinutes();\n    if (min < 10) {\n        min = \"0\" + min;\n    }\n    let ampm = \"am\";\n    if (hr > 12) {\n        hr -= 12;\n        ampm = \"pm\";\n    }\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n    return day + \" \" + hr + \":\" + min + ampm + \" \" + date + \" \" + month + \" \" + year;\n}\n\n\nlet eventInfoWrapper = {}\nlet eventInfo = {}\n\neventInfo = msg.payload.info\n\n\neventInfo.Event_id = constructOutput(eventInfo.Event_id)\neventInfo.time = getFormattedTime(eventInfo.time)\neventInfo.Group = constructGroup(eventInfo.Group)\neventInfo.Direction = constructDirection(eventInfo.Direction)\n\neventInfoWrapper.payload = {}\neventInfoWrapper.payload.command = \"addData\"\neventInfoWrapper.payload.arguments = [eventInfo, false]\n\nlet main_settings_arr = global.get('main_settings').list\nlet instance = main_settings_arr.find(function (el) {return el.device_set_idxs.Control_point_idx === eventInfo.Ctp_idx})\n\nif(instance){\n    eventInfo.Ctp_idx = instance.info.name\n} else{\n    eventInfo.Ctp_idx = \"Unknown\"\n}\n\nlet currentCardKey = {\n    key_id: eventInfo.Key_id,\n    key_hex: eventInfo.Key_HEX\n}\n\nglobal.set(\"currentCardKey\", currentCardKey)\n\n\n\nreturn eventInfoWrapper;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 800,
        "wires": [
            [
                "32d53427bced070c"
            ]
        ]
    },
    {
        "id": "95c8a2503541cab9",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "handleSetAccessMode-Ack",
        "func": "let ackInfo = {}\nlet messageId = global.get(\"messageId\")\n\n\n\nif (messageId === msg.payload.message_id) {\n\n    if (msg.payload.result.errorNo === 0) {\n        ackInfo.topic = \"Success\"\n        ackInfo.payload = \"Done\"\n\n    } else {\n        ackInfo.topic = \"Error\"\n        ackInfo.payload = \"Error\"\n    }\n}\n\nreturn ackInfo;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1800,
        "y": 840,
        "wires": [
            [
                "6c8acdd459e657eb"
            ]
        ]
    },
    {
        "id": "6ad93d3e94e2fe69",
        "type": "ui_template",
        "z": "692c798b6f9c61de",
        "group": "61a80ff8ccd60942",
        "name": "Device address",
        "order": 1,
        "width": 18,
        "height": 1,
        "format": "<style>\n    #userCreds {\n        display: flex;\n        flex-direction: row;\n        font-size: 25px;\n    }\n\n</style>\n\n<div id=\"userCreds\">\n    <div>{{msg.payload.deviceAddr}}</div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1120,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "5c0f4a3dd94ecbbf",
        "type": "ui_button",
        "z": "692c798b6f9c61de",
        "name": "Connect to MQTT",
        "group": "08691a1abdc449f7",
        "order": 11,
        "width": 8,
        "height": 1,
        "passthru": false,
        "label": "Connect to MQTT",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"action\":\"connect\"}",
        "payloadType": "json",
        "topic": "",
        "topicType": "str",
        "x": 630,
        "y": 900,
        "wires": [
            [
                "1f7ea9be7c722e68",
                "9c089a6faed821bd",
                "2b2d85fbc2c145a5",
                "e6bc21e1b963fbf6"
            ]
        ]
    },
    {
        "id": "1f7ea9be7c722e68",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "handleMqttBroker",
        "func": "let mqttSettings = global.get('mqtt_settings')\n\nif (msg.payload.action === \"connect\"){\n    msg.action = \"connect\"\n    msg.broker = {\n        broker: mqttSettings.host,\n        port: mqttSettings.port,\n        username: mqttSettings.username,\n        password: mqttSettings.password\n    }\n} else if (msg.payload.action === \"disconnect\"){\n    msg.action = \"disconnect\"\n    console.log(\"disconnect\")\n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 840,
        "wires": [
            [
                "9e5fe1c3fe6f0503"
            ]
        ]
    },
    {
        "id": "d81bab586132c7e4",
        "type": "ui_button",
        "z": "692c798b6f9c61de",
        "name": "Stop connection",
        "group": "08691a1abdc449f7",
        "order": 12,
        "width": 8,
        "height": 1,
        "passthru": false,
        "label": "Stop connection",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"action\":\"disconnect\"}",
        "payloadType": "json",
        "topic": "",
        "topicType": "str",
        "x": 620,
        "y": 840,
        "wires": [
            [
                "1f7ea9be7c722e68"
            ]
        ]
    },
    {
        "id": "881c61e409196bd8",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "handleSingle_pass-Ack",
        "func": "let ackInfo = {}\nlet messageId = global.get(\"messageId\")\n\n\n\n\nif (messageId === msg.payload.message_id) {\n    if (msg.payload.result.errorNo === 0) {\n        ackInfo.topic = \"Success\"\n        ackInfo.payload = \"Done\"\n\n\n    } else {\n        ackInfo.topic = \"Error\"\n        ackInfo.payload = \"Error\"\n\n    }\n}\n\nreturn ackInfo;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 880,
        "wires": [
            [
                "6c8acdd459e657eb"
            ]
        ]
    },
    {
        "id": "84cef9c2bb45ee64",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "buildStatusMessage",
        "func": "let mqttSettings = global.get('mqtt_settings')\nlet message = {}\nmessage.payload = {}\n\nif (msg.status.text === \"node-red:common.status.connecting\") {\n    message.payload.connectionStatus = \"MQTT: Connecting...\"\n    msg.payload = \"Connecting to \" + mqttSettings.broker + \":\" + mqttSettings.port\n} else if (msg.status.text === \"node-red:common.status.connected\") {\n    message.payload.connectionStatus = \"MQTT: Connected to \" + mqttSettings.host + \":\" + mqttSettings.port\n    msg.payload = \"Connected to \" + mqttSettings.host + \":\" + mqttSettings.port\n} else if (msg.status.text === \"node-red:common.status.disconnected\") {\n    message.payload.connectionStatus = \"MQTT: Connection OFF\"\n    msg.payload = \"Mqtt disconnected\"\n}\n\nreturn [message, msg]\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 960,
        "wires": [
            [
                "6cc4dd7e4806e9e6"
            ],
            [
                "2f28a02598ca6e15"
            ]
        ]
    },
    {
        "id": "2f28a02598ca6e15",
        "type": "ui_toast",
        "z": "692c798b6f9c61de",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 390,
        "y": 1020,
        "wires": []
    },
    {
        "id": "6cc4dd7e4806e9e6",
        "type": "ui_template",
        "z": "692c798b6f9c61de",
        "group": "61a80ff8ccd60942",
        "name": "Mqtt status",
        "order": 2,
        "width": 12,
        "height": 1,
        "format": "<style>\n    #mqttStatus {\n        display: flex;\n        flex-direction: row-reverse;\n        font-size: 25px;\n        display: flex;\n        margin-left: 5px;\n    }\n\n    #mqttStatus div {\n        margin-left: 20px;\n    }\n</style>\n\n<div id=\"mqttStatus\">\n    <div>{{msg.payload.connectionStatus}}</div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 310,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "8fecdfbd30a2545b",
        "type": "ui_template",
        "z": "692c798b6f9c61de",
        "group": "08691a1abdc449f7",
        "name": "Connection options",
        "order": 1,
        "width": 30,
        "height": 1,
        "format": "<style>\n    #connectionHeader{\n        text-align: center;\n        color: #0094CE;\n        font-size: 30px;\n        font-weight: 700\n    }\n</style>\n\n\n<div id=\"connectionHeader\">\n    Connection options\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 630,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "a9fc57cdad44cd14",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "sendMqttMessage",
        "func": "\nlet userCreds = global.get('userCreds');\nlet globalTopic = userCreds.location + \"/\" + userCreds.device_id + \"/\"\n\nlet msgWrapper = {}\nmsgWrapper.operator = \"SetCtpDoor\"\nmsgWrapper.session_id = \"0\"\nmsgWrapper.message_id = Math.floor(Math.random() * 1692797271182).toString();;\nmsgWrapper.info = Object.assign(global.get('device_set_idxs'), global.get('door_settings'))\n\nmsg.payload = msgWrapper\nmsg.topic = globalTopic + \"Operate\" + \"/\"\n\nglobal.set('messageId', msgWrapper.message_id)\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4130,
        "y": 3760,
        "wires": [
            [
                "689eaeb65ca4fba4"
            ]
        ]
    },
    {
        "id": "940bef210d3fe68f",
        "type": "ui_button",
        "z": "692c798b6f9c61de",
        "name": "",
        "group": "6cbd42c7b26f3143",
        "order": 2,
        "width": 20,
        "height": 1,
        "passthru": false,
        "label": "Submit device settings",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 4040,
        "y": 3640,
        "wires": [
            [
                "a9fc57cdad44cd14"
            ]
        ]
    },
    {
        "id": "689eaeb65ca4fba4",
        "type": "mqtt out",
        "z": "692c798b6f9c61de",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "79737e067a3af084",
        "x": 4350,
        "y": 3660,
        "wires": []
    },
    {
        "id": "d83cd52bb6d220f3",
        "type": "ui_text_input",
        "z": "692c798b6f9c61de",
        "d": true,
        "g": "10f19757a09301a8",
        "name": "Rd_idx",
        "label": "Rd_idx",
        "tooltip": "",
        "group": "01eefd96a559eaf3",
        "order": 4,
        "width": 10,
        "height": 2,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Rd_idx",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3320,
        "y": 3280,
        "wires": [
            []
        ]
    },
    {
        "id": "6a874cf39f52a41c",
        "type": "ui_text_input",
        "z": "692c798b6f9c61de",
        "d": true,
        "g": "10f19757a09301a8",
        "name": "Control_point_idx_DUMMY",
        "label": "Control_point_idx",
        "tooltip": "",
        "group": "01eefd96a559eaf3",
        "order": 3,
        "width": 10,
        "height": 2,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Control_point_idx",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3260,
        "y": 3320,
        "wires": [
            []
        ]
    },
    {
        "id": "44eead080f6ff893",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "g": "10f19757a09301a8",
        "name": "Direction (Rd_Direction)",
        "label": "Direction (Rd_Direction)",
        "tooltip": "",
        "place": "Select option",
        "group": "01eefd96a559eaf3",
        "order": 5,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Entry",
                "value": 0,
                "type": "num"
            },
            {
                "label": "Exit",
                "value": 1,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "Rd_Direction",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 3270,
        "y": 3400,
        "wires": [
            [
                "6e20a4e8faad6ec9"
            ]
        ]
    },
    {
        "id": "2c0e5a1f061ca6fb",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "g": "10f19757a09301a8",
        "name": " Reverse byte order (Rd_Key_endian)",
        "label": " Reverse byte order (Rd_Key_endian)",
        "tooltip": "",
        "place": "Select option",
        "group": "01eefd96a559eaf3",
        "order": 8,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "ON",
                "value": true,
                "type": "bool"
            },
            {
                "label": "OFF",
                "value": false,
                "type": "bool"
            }
        ],
        "payload": "",
        "topic": "Rd_Key_endian",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 3230,
        "y": 3440,
        "wires": [
            [
                "6e20a4e8faad6ec9"
            ]
        ]
    },
    {
        "id": "60f424913e84a261",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "g": "10f19757a09301a8",
        "name": "Buzzer (Rd_beep)",
        "label": "Buzzer (Rd_beep)",
        "tooltip": "",
        "place": "Select option",
        "group": "01eefd96a559eaf3",
        "order": 6,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "On",
                "value": true,
                "type": "bool"
            },
            {
                "label": "Off",
                "value": false,
                "type": "bool"
            }
        ],
        "payload": "",
        "topic": "Rd_beep",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 3290,
        "y": 3480,
        "wires": [
            [
                "6e20a4e8faad6ec9"
            ]
        ]
    },
    {
        "id": "0ec93d1beaa5a9e4",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "g": "10f19757a09301a8",
        "name": "Wiegand protocol type (Rd_Wg_type)",
        "label": "Wiegand protocol type (Rd_Wg_type)",
        "tooltip": "",
        "place": "Select option",
        "group": "01eefd96a559eaf3",
        "order": 7,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Wiegand 4",
                "value": 0,
                "type": "num"
            },
            {
                "label": "Wiegand 8",
                "value": 1,
                "type": "num"
            },
            {
                "label": "Wiegand 26",
                "value": 2,
                "type": "num"
            },
            {
                "label": "Wiegand 34",
                "value": 3,
                "type": "num"
            },
            {
                "label": "Wiegand 37",
                "value": 4,
                "type": "num"
            },
            {
                "label": "Wiegand 40",
                "value": 5,
                "type": "num"
            },
            {
                "label": "Wiegand 42",
                "value": 6,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "Rd_Wg_type",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 3230,
        "y": 3520,
        "wires": [
            [
                "6e20a4e8faad6ec9"
            ]
        ]
    },
    {
        "id": "6e20a4e8faad6ec9",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "10f19757a09301a8",
        "name": "SetRd1",
        "func": "let rdSet = global.get('rd_1_set') || {};\nrdSet = Object.assign(rdSet, { [msg.topic]: msg.payload })\nglobal.set('rd_1_set', rdSet)\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3660,
        "y": 3420,
        "wires": [
            []
        ]
    },
    {
        "id": "3e7f179e8060b80f",
        "type": "ui_template",
        "z": "692c798b6f9c61de",
        "g": "10f19757a09301a8",
        "group": "01eefd96a559eaf3",
        "name": "Reader 2 settings",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<style>\n    #reader_2{\n        text-align: left;\n        color: green;\n        font-size: 25px;\n        font-weight: 700\n    }\n</style>\n\n\n<div id=\"reader_2\">\n    Reader 2 settings\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3350,
        "y": 3240,
        "wires": [
            []
        ]
    },
    {
        "id": "222ca6d9f33aad97",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "g": "10f19757a09301a8",
        "name": "Reader location (Rd_opt)",
        "label": "Reader location (Rd_opt)",
        "tooltip": "",
        "place": "Select option",
        "group": "01eefd96a559eaf3",
        "order": 9,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "ACU",
                "value": 1,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "Rd_opt",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 3270,
        "y": 3360,
        "wires": [
            [
                "6e20a4e8faad6ec9"
            ]
        ]
    },
    {
        "id": "e5a3acd7c9ec31f5",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "g": "10f19757a09301a8",
        "name": "Wiegand port (Rd_Wg_idx)",
        "label": "Wiegand port (Rd_Wg_idx)",
        "tooltip": "",
        "place": "Select option",
        "group": "01eefd96a559eaf3",
        "order": 10,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Internal",
                "value": 1,
                "type": "num"
            },
            {
                "label": "External",
                "value": 2,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "Rd_Wg_idx",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 3200,
        "y": 3560,
        "wires": [
            [
                "6e20a4e8faad6ec9"
            ]
        ]
    },
    {
        "id": "aad987ee2a0c4f2c",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "handleSetCtpDoor-Ack",
        "func": "let messageId = global.get(\"messageId\")\n\nif (messageId === msg.payload.message_id) {\n    let ackInfo = {}\n    if (msg.payload.result.errorNo === 0) {\n\n        ackInfo.result = \"success\"\n        ackInfo.payload = \"Done\"\n    } else {\n\n        ackInfo.result = \"error\"\n        ackInfo.payload = \"error\"\n    }\n    return ackInfo;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 920,
        "wires": [
            [
                "87fae78443f92019"
            ]
        ]
    },
    {
        "id": "d969e40c2e543dae",
        "type": "switch",
        "z": "692c798b6f9c61de",
        "name": "",
        "property": "result",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "error",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "success",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2070,
        "y": 1180,
        "wires": [
            [
                "b34c7c3825b2f296"
            ],
            [
                "770b753a51e0e70a"
            ]
        ]
    },
    {
        "id": "a902fb928a850e75",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "setReader1",
        "func": "\nlet userCreds = global.get('userCreds');\nlet device_set_idxs = global.get('device_set_idxs');\nlet cpoint_instance = global.get('cpoint_instance')\n\nlet globalTopic = userCreds.location + \"/\" + userCreds.device_id + \"/\"\nlet msgWrapper = {}\nmsgWrapper.operator = \"SetRd\"\nmsgWrapper.session_id = \"0\"\nmsgWrapper.message_id = Math.floor(Math.random() * 1692797271182).toString();\nmsgWrapper.info = cpoint_instance.reader_1_settings;\n\nmsgWrapper.info.Control_point_idx = cpoint_instance.device_set_idxs.Control_point_idx\n\nmsg.payload = msgWrapper\nmsg.topic = globalTopic + \"Operate\" + \"/\"\n\nglobal.set('messageId_rd_0', msgWrapper.message_id)\n\nreturn msg\n\n\n\n\n\n\n\n\n\nmsgWrapper.operator = \"SetCtpDoor\"\nmsgWrapper.session_id = \"0\"\nmsgWrapper.message_id = Math.floor(Math.random() * 1692797271182).toString();\n\nmsgWrapper.info = Object.assign(cpoint_instance.device_set_idxs,\n    cpoint_instance.door_settings)\n\nmsg.payload = msgWrapper\nmsg.topic = globalTopic + \"Operate\" + \"/\"\n\nglobal.set('messageId', msgWrapper.message_id)\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2750,
        "y": 1180,
        "wires": [
            [
                "62276b0a5748fef9"
            ]
        ]
    },
    {
        "id": "a607e57b9c8d8cdd",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "SetCtpDoor",
        "func": "let door_settings = global.get('door_settings') || {};\ndoor_settings = Object.assign(door_settings, {[msg.topic]:msg.payload})\nglobal.set('door_settings', door_settings)\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2510,
        "y": 3140,
        "wires": [
            []
        ]
    },
    {
        "id": "84d7a118ddd9842f",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "Door sensor condition (Door_sens_Condition)",
        "label": "Door sensor condition (Door_sens_Condition)",
        "tooltip": "",
        "place": "",
        "group": "91a9ce4bbf4bb377",
        "order": 9,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Open",
                "value": 0,
                "type": "num"
            },
            {
                "label": "Close",
                "value": 1,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "Door_sens_Condition",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 1980,
        "y": 3040,
        "wires": [
            [
                "a607e57b9c8d8cdd"
            ]
        ]
    },
    {
        "id": "5876e97090ffded2",
        "type": "ui_text_input",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "Control point index (Control_point_idx)",
        "label": "Control point index (Control_point_idx):",
        "tooltip": "",
        "group": "91a9ce4bbf4bb377",
        "order": 2,
        "width": 10,
        "height": 2,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Control_point_idx",
        "sendOnBlur": true,
        "className": "text_input",
        "topicType": "str",
        "x": 2090,
        "y": 2900,
        "wires": [
            [
                "5c869c44f8db9da9"
            ]
        ]
    },
    {
        "id": "4a42fef97bd379c2",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "Door lock mode (Door_Lock_mode)",
        "label": "Door lock mode (Door_Lock_mode)",
        "tooltip": "",
        "place": "Select option",
        "group": "91a9ce4bbf4bb377",
        "order": 10,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "trigger",
                "value": 0,
                "type": "num"
            },
            {
                "label": "impulse",
                "value": 1,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "Door_Lock_mode",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 2020,
        "y": 3280,
        "wires": [
            [
                "a607e57b9c8d8cdd"
            ]
        ]
    },
    {
        "id": "297191ec56ab0272",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "Door lock type (Door_Lock_type)",
        "label": "Door lock type (Door_Lock_type)",
        "tooltip": "",
        "place": "Select option",
        "group": "91a9ce4bbf4bb377",
        "order": 13,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "NO (Normal opened)",
                "value": 0,
                "type": "num"
            },
            {
                "label": "NC (Normal closed)",
                "value": 1,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "Door_Lock_type",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 2020,
        "y": 3320,
        "wires": [
            [
                "a607e57b9c8d8cdd"
            ]
        ]
    },
    {
        "id": "d8697b4c53aa26a1",
        "type": "ui_text_input",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "Impulse duration (milliseconds) (Door_Lock_puls)",
        "label": "Impulse duration (sec) (Door_Lock_puls):",
        "tooltip": "",
        "group": "91a9ce4bbf4bb377",
        "order": 11,
        "width": 10,
        "height": 2,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Door_Lock_puls",
        "sendOnBlur": true,
        "className": "text_input",
        "topicType": "str",
        "x": 1970,
        "y": 3360,
        "wires": [
            [
                "a607e57b9c8d8cdd"
            ]
        ]
    },
    {
        "id": "d0c523e32a8ea14f",
        "type": "ui_text_input",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "Hold duration, sec (Door_Delay)",
        "label": "Hold duration, sec (Door_Delay):",
        "tooltip": "",
        "group": "91a9ce4bbf4bb377",
        "order": 12,
        "width": 10,
        "height": 2,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Door_Delay",
        "sendOnBlur": true,
        "className": "text_input",
        "topicType": "str",
        "x": 2030,
        "y": 3400,
        "wires": [
            [
                "a607e57b9c8d8cdd"
            ]
        ]
    },
    {
        "id": "1dc6ecb687b4c702",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "Button condition (Button_rex_Condition)",
        "label": "Button condition (Button_rex_Condition)",
        "tooltip": "",
        "place": "Select button condition",
        "group": "91a9ce4bbf4bb377",
        "order": 27,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Open",
                "value": 0,
                "type": "num"
            },
            {
                "label": "Close",
                "value": 1,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "Button_rex_Condition",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 2000,
        "y": 3160,
        "wires": [
            [
                "a607e57b9c8d8cdd"
            ]
        ]
    },
    {
        "id": "4d74c64a6d551fbf",
        "type": "ui_text_input",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "Reader 2 index (Rd1_idx)",
        "label": "Reader 2 index (Rd1_idx):",
        "tooltip": "",
        "group": "91a9ce4bbf4bb377",
        "order": 4,
        "width": 10,
        "height": 2,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Rd1_idx",
        "sendOnBlur": true,
        "className": "text_input",
        "topicType": "str",
        "x": 2130,
        "y": 2860,
        "wires": [
            [
                "5c869c44f8db9da9"
            ]
        ]
    },
    {
        "id": "c195fb1af7d90e90",
        "type": "ui_template",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "group": "91a9ce4bbf4bb377",
        "name": "CP Settings label",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>\n    #CP_Header{\n        text-align: left;\n        color: #0094CE;\n        font-size: 25px;\n        font-weight: 700\n    }\n</style>\n\n\n<div id=\"CP_Header\">\n    Control point settings\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2450,
        "y": 3260,
        "wires": [
            []
        ]
    },
    {
        "id": "3c691a45025ba009",
        "type": "ui_text_input",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "Reader 1 index (Rd0_idx)",
        "label": "Reader 1 index (Rd0_idx):",
        "tooltip": "",
        "group": "91a9ce4bbf4bb377",
        "order": 3,
        "width": 10,
        "height": 2,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Rd0_idx",
        "sendOnBlur": true,
        "className": "text_input",
        "topicType": "str",
        "x": 2130,
        "y": 2820,
        "wires": [
            [
                "5c869c44f8db9da9"
            ]
        ]
    },
    {
        "id": "8d0f58b9725145dc",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "Door Sensor Input Location (Door_sens_opt)",
        "label": "Door sensor input location (Door_sens_opt)",
        "tooltip": "",
        "place": "Select option",
        "group": "91a9ce4bbf4bb377",
        "order": 7,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "ACU",
                "value": 0,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "Door_sens_opt",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 1990,
        "y": 2960,
        "wires": [
            [
                "a607e57b9c8d8cdd"
            ]
        ]
    },
    {
        "id": "061aecc325f2ccf3",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "Input index for door sensor (Door_sens_idx)",
        "label": "Input index for door sensor (Door_sens_idx)",
        "tooltip": "",
        "place": "Select option",
        "group": "91a9ce4bbf4bb377",
        "order": 8,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Pink",
                "value": 0,
                "type": "num"
            },
            {
                "label": "Blue",
                "value": 1,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "Door_sens_idx",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 1990,
        "y": 3000,
        "wires": [
            [
                "a607e57b9c8d8cdd"
            ]
        ]
    },
    {
        "id": "b2474e59834ac54b",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "Input index for exit button (Button_rex_idx)",
        "label": "Input index for exit button (Button_rex_idx)",
        "tooltip": "",
        "place": "Select option",
        "group": "91a9ce4bbf4bb377",
        "order": 26,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Pink",
                "value": 0,
                "type": "num"
            },
            {
                "label": "Blue",
                "value": 1,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "Button_rex_idx",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 1990,
        "y": 3120,
        "wires": [
            [
                "a607e57b9c8d8cdd"
            ]
        ]
    },
    {
        "id": "00ecd6dbee19221f",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "Lock relay location (Lock_Relay_opt)",
        "label": "Lock relay location (Lock_Relay_opt)",
        "tooltip": "",
        "place": "Select option",
        "group": "91a9ce4bbf4bb377",
        "order": 20,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "ACU",
                "value": 0,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "Lock_Relay_opt",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 2010,
        "y": 3200,
        "wires": [
            [
                "a607e57b9c8d8cdd"
            ]
        ]
    },
    {
        "id": "9511360cabc09665",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "Lock relay index (Lock_Relay_idx)",
        "label": "Lock relay index (Lock_Relay_idx)",
        "tooltip": "",
        "place": "Select option",
        "group": "91a9ce4bbf4bb377",
        "order": 19,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Grey",
                "value": 0,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "Lock_Relay_idx",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 2020,
        "y": 3240,
        "wires": [
            [
                "a607e57b9c8d8cdd"
            ]
        ]
    },
    {
        "id": "b083bea11642642c",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "Autolock (Door_Sens_Autolock)",
        "label": "Autolock (Door_Sens_Autolock)",
        "tooltip": "",
        "place": "Select option",
        "group": "91a9ce4bbf4bb377",
        "order": 14,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "ON",
                "value": true,
                "type": "bool"
            },
            {
                "label": "OFF",
                "value": false,
                "type": "bool"
            }
        ],
        "payload": "",
        "topic": "Door_Sens_Autolock",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 2030,
        "y": 3440,
        "wires": [
            [
                "a607e57b9c8d8cdd"
            ]
        ]
    },
    {
        "id": "1decd6fb7be79a57",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "Timezone (tz)",
        "label": "Timezone (tz)",
        "tooltip": "",
        "place": "Select timezone",
        "group": "91a9ce4bbf4bb377",
        "order": 31,
        "width": 20,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "(UTC-12:00) International Date Line West",
                "value": "<-12>12",
                "type": "str"
            },
            {
                "label": "(UTC-11:00) Coordinated Universal Time-11",
                "value": "SST11",
                "type": "str"
            },
            {
                "label": "(UTC-10:00) Aleutian Islands, Hawaii",
                "value": "HST10",
                "type": "str"
            },
            {
                "label": "(UTC-09:00) Alaska",
                "value": "<-09>9",
                "type": "str"
            },
            {
                "label": "(UTC-08:00) Pacific Time (US & Canada)",
                "value": "PST8PDT,M3.2.0,M11.1.0",
                "type": "str"
            },
            {
                "label": "(UTC-07:00) Chihuahua, La Paz, Mazatlan, Arizona",
                "value": "MST7MDT,M4.1.0,M10.5.0",
                "type": "str"
            },
            {
                "label": "(UTC-06:00) Guadalajara, Mexico City, Monterrey, Saskatchewan, Easter Island",
                "value": "CST6CDT,M4.1.0,M10.5.0",
                "type": "str"
            },
            {
                "label": "(UTC-05:00) Bogota, Lima, Quito, Rio Branco, Chetumal, Haiti, Havana",
                "value": "<-05>5",
                "type": "str"
            },
            {
                "label": "(UTC-04:00) Georgetown, La Paz, Manaus, San Juan",
                "value": "<-04>4",
                "type": "str"
            },
            {
                "label": "(UTC-03:00) Araguaina, Brasilia, Cayenne, Fortaleza, Salvador",
                "value": "<-03>3",
                "type": "str"
            },
            {
                "label": "(UTC-02:00) Mid-Atlantic - Old",
                "value": "<-02>2",
                "type": "str"
            },
            {
                "label": "(UTC-01:00) Azores",
                "value": "<-01>1<+00>,M3.5.0/0,M10.5.0/1",
                "type": "str"
            },
            {
                "label": "(UTC+00:00) Dublin, Edinburgh, Lisbon, London",
                "value": "GMT0",
                "type": "str"
            },
            {
                "label": "(UTC+01:00) Amsterdam, Berlin, Budapest, Ljubljana, Prague, Brussels, Copenhagen, Madrid, Paris",
                "value": "CET-1CEST,M3.5.0,M10.5.0/3",
                "type": "str"
            },
            {
                "label": "(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius, Jerusalem, Kaliningrad, Tripoli",
                "value": "EET-2EEST,M3.5.0/3,M10.5.0/4",
                "type": "str"
            },
            {
                "label": "(UTC+03:00) Kuwait, Riyadh, Baghdad, Istanbul, Minsk, Moscow, St. Petersburg, Volgograd",
                "value": "MSK-3",
                "type": "str"
            },
            {
                "label": "(UTC+03:30) Tehran",
                "value": "<+0330>-3:30<+0430>,J79/24,J263/24",
                "type": "str"
            },
            {
                "label": "(UTC+04:00) Abu Dhabi, Muscat, Astrakhan, Ulyanovsk, Baku, Izhevsk, Samara",
                "value": "<+04>-4",
                "type": "str"
            },
            {
                "label": "(UTC+04:30) Kabul",
                "value": "<+0430>-4:30",
                "type": "str"
            },
            {
                "label": "(UTC+05:00) Ashgabat, Tashkent, Ekaterinburg, Islamabad, Karachi",
                "value": "PKT-5",
                "type": "str"
            },
            {
                "label": "(UTC+06:00) Astana, Dhaka, Omsk",
                "value": "<+06>-6",
                "type": "str"
            },
            {
                "label": "(UTC+07:00) Bangkok, Hanoi, Jakarta, Barnaul, Gorno-Altaysk, Krasnoyarsk, Novosibirsk",
                "value": "<+07>-7",
                "type": "str"
            },
            {
                "label": "(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi, Irkutsk, Kuala Lumpur, Singapore",
                "value": "HKT-8",
                "type": "str"
            },
            {
                "label": "(UTC+09:00) Chita, Osaka, Sapporo, Tokyo, Seoul, Yakutsk",
                "value": "JST-9",
                "type": "str"
            },
            {
                "label": "(UTC+09:30) Adelaide, Darwin",
                "value": "ACST-9:30",
                "type": "str"
            },
            {
                "label": "(UTC+10:00) Brisbane, Canberra, Melbourne, Sydney, Vladivostok",
                "value": "<+10>-10",
                "type": "str"
            },
            {
                "label": "(UTC+11:00) Bougainville Island, Chokurdakh, Magadan, Norfolk Island, Sakhalin",
                "value": "<+11>-11",
                "type": "str"
            },
            {
                "label": "(UTC+12:00) Anadyr, Petropavlovsk-Kamchatsky, Auckland, Wellington",
                "value": "NZST-12NZDT,M9.5.0,M4.1.0/3",
                "type": "str"
            },
            {
                "label": "(UTC+13:00) Nuku'alofa, Samoa",
                "value": "<+13>-13",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "tz",
        "topicType": "str",
        "className": "timezone",
        "x": 2000,
        "y": 3520,
        "wires": [
            [
                "ddab9916254d4a0e"
            ]
        ]
    },
    {
        "id": "ddab9916254d4a0e",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "setTime",
        "func": "let time_settings = global.get('time_settings') || {};\ntime_settings = Object.assign(time_settings, { [msg.topic]: msg.payload })\nglobal.set('time_settings', time_settings)\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2220,
        "y": 3520,
        "wires": [
            []
        ]
    },
    {
        "id": "ebf4caecba2c3b0f",
        "type": "ui_switch",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "Use DST/GTM (DST_GMT)",
        "label": "Use DST/GTM (DST_GMT)",
        "tooltip": "",
        "group": "91a9ce4bbf4bb377",
        "order": 30,
        "width": 10,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "DST_GMT",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "dropdown_input",
        "x": 1960,
        "y": 3480,
        "wires": [
            [
                "ddab9916254d4a0e"
            ]
        ]
    },
    {
        "id": "b21a19bb0acbfa9c",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "Input location for exit button (Button_rex_opt)",
        "label": "Input location for exit button (Button_rex_opt)",
        "tooltip": "",
        "place": "Select option",
        "group": "91a9ce4bbf4bb377",
        "order": 25,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Controller",
                "value": 0,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "Button_rex_opt",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 1990,
        "y": 3080,
        "wires": [
            [
                "a607e57b9c8d8cdd"
            ]
        ]
    },
    {
        "id": "b60a07a5f5df2db6",
        "type": "ui_template",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "group": "91a9ce4bbf4bb377",
        "name": "Door Settings label",
        "order": 6,
        "width": 0,
        "height": 0,
        "format": "<style>\n    #door_settings{\n        text-align: left;\n        color: #0094CE;\n        font-size: 25px;\n        font-weight: 700\n    }\n</style>\n\n\n<div id=\"door_settings\">\n    Door settings\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2450,
        "y": 3300,
        "wires": [
            []
        ]
    },
    {
        "id": "c8960adebc938996",
        "type": "ui_template",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "group": "91a9ce4bbf4bb377",
        "name": "Lock Settings label",
        "order": 18,
        "width": 0,
        "height": 0,
        "format": "<style>\n    #lock_settings{\n        text-align: left;\n        color: #0094CE;\n        font-size: 25px;\n        font-weight: 700\n    }\n</style>\n\n\n<div id=\"lock_settings\">\n    Lock settings\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2450,
        "y": 3340,
        "wires": [
            []
        ]
    },
    {
        "id": "341cca91a1fdb94a",
        "type": "ui_template",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "group": "91a9ce4bbf4bb377",
        "name": "Button settings label",
        "order": 24,
        "width": 0,
        "height": 0,
        "format": "<style>\n    #button_settings{\n        text-align: left;\n        color: #0094CE;\n        font-size: 25px;\n        font-weight: 700\n    }\n</style>\n\n\n<div id=\"button_settings\">\n    Button settings\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2460,
        "y": 3380,
        "wires": [
            []
        ]
    },
    {
        "id": "2f40703481bf226e",
        "type": "ui_template",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "group": "91a9ce4bbf4bb377",
        "name": "Timezone settings label",
        "order": 29,
        "width": 0,
        "height": 0,
        "format": "<style>\n    #Timezone_settings{\n        text-align: left;\n        color: #0094CE;\n        font-size: 25px;\n        font-weight: 700\n    }\n</style>\n\n\n<div id=\"Timezone_settings\">\n    Timezone settings\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 2470,
        "y": 3420,
        "wires": [
            []
        ]
    },
    {
        "id": "b34c7c3825b2f296",
        "type": "ui_toast",
        "z": "692c798b6f9c61de",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Ack info",
        "x": 2300,
        "y": 1140,
        "wires": []
    },
    {
        "id": "5c869c44f8db9da9",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "setDevicesIdx",
        "func": "let device_set_idxs = global.get('device_set_idxs') || {};\ndevice_set_idxs = Object.assign(device_set_idxs, { [msg.topic]: msg.payload })\nglobal.set('device_set_idxs', device_set_idxs)",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2460,
        "y": 2860,
        "wires": [
            []
        ]
    },
    {
        "id": "62276b0a5748fef9",
        "type": "mqtt out",
        "z": "692c798b6f9c61de",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "79737e067a3af084",
        "x": 2950,
        "y": 1240,
        "wires": []
    },
    {
        "id": "2c9973e0b952c269",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "handleSetRd-Ack",
        "func": "let messageId_rd_0 = global.get(\"messageId_rd_0\")\nlet messageId_rd_1 = global.get(\"messageId_rd_1\")\n\n\n\nlet ackInfo_rd_0 = {}\nlet ackInfo_rd_1 = {}\n\nif (messageId_rd_0 === msg.payload.message_id) {\n\n    if (msg.payload.result.errorNo === 0) {\n        ackInfo_rd_0.result = \"success\"\n        ackInfo_rd_0.payload = \"Done\"\n    } else {\n        ackInfo_rd_0.result = \"error\"\n        ackInfo_rd_0.payload = \"error\"\n    }\n} else if (messageId_rd_1 === msg.payload.message_id){\n\n    if (msg.payload.result.errorNo === 0) {\n        ackInfo_rd_1.result = \"success\"\n        ackInfo_rd_1.payload = \"Done\"\n    } else {\n        ackInfo_rd_1.result = \"error\"\n        ackInfo_rd_1.payload = \"error\"\n    }\n}\n\nreturn [ackInfo_rd_0, ackInfo_rd_1]\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1790,
        "y": 1340,
        "wires": [
            [
                "e063be51f1201adf"
            ],
            [
                "bc76cb99e8d741fc"
            ]
        ]
    },
    {
        "id": "e063be51f1201adf",
        "type": "switch",
        "z": "692c798b6f9c61de",
        "name": "",
        "property": "result",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "error",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "success",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2090,
        "y": 1280,
        "wires": [
            [
                "7416ec0179370582"
            ],
            [
                "914448cec51bf657"
            ]
        ]
    },
    {
        "id": "2027404e36d47db4",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "setReader2",
        "func": "\nlet userCreds = global.get('userCreds');\nlet device_set_idxs = global.get('device_set_idxs');\nlet cpoint_instance = global.get('cpoint_instance')\n\nlet globalTopic = userCreds.location + \"/\" + userCreds.device_id + \"/\"\nlet msgWrapper = {}\nmsgWrapper.operator = \"SetRd\"\nmsgWrapper.session_id = \"0\"\nmsgWrapper.message_id = Math.floor(Math.random() * 1692797271182).toString();\nmsgWrapper.info = cpoint_instance.reader_2_settings;\n\nmsgWrapper.info.Control_point_idx = cpoint_instance.device_set_idxs.Control_point_idx\n\nmsg.payload = msgWrapper\nmsg.topic = globalTopic + \"Operate\" + \"/\"\n\nglobal.set('messageId_rd_1', msgWrapper.message_id)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2670,
        "y": 1240,
        "wires": [
            [
                "62276b0a5748fef9"
            ]
        ]
    },
    {
        "id": "7416ec0179370582",
        "type": "ui_toast",
        "z": "692c798b6f9c61de",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Ack info",
        "x": 2100,
        "y": 1240,
        "wires": []
    },
    {
        "id": "fdf6aa2ba915be6d",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "setDateTime",
        "func": "let userCreds = global.get('userCreds');\nlet cpoint_instance = global.get('cpoint_instance')\nlet globalTopic = userCreds.location + \"/\" + userCreds.device_id + \"/\"\n\nlet msgWrapper = {}\nmsgWrapper.operator = \"SetDateTime\"\nmsgWrapper.session_id = \"0\"\nmsgWrapper.message_id = Math.floor(Math.random() * 1692797271182).toString();\nmsgWrapper.info = cpoint_instance.time_settings\n\nmsgWrapper.info.DateTime = Date.now()\nmsgWrapper.info.GMT = 7200\nmsgWrapper.info.NTP1 = \"pool.ntp.org\"\nmsgWrapper.info.NTP2 = \"pool2.ntp.org:123\"\nmsgWrapper.info.DST_Shift = 3600\n\n\nmsg.payload = msgWrapper\nmsg.topic = globalTopic + \"Operate\" + \"/\"\n\nglobal.set('messageId', msgWrapper.message_id)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2130,
        "y": 920,
        "wires": [
            [
                "8990bcfaab163a75"
            ]
        ]
    },
    {
        "id": "6505c8ff956b3f78",
        "type": "inject",
        "z": "692c798b6f9c61de",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 3870,
        "y": 1340,
        "wires": [
            [
                "6d7ac608b771c09f"
            ]
        ]
    },
    {
        "id": "28a1c7a16938fbb3",
        "type": "ui_text_input",
        "z": "692c798b6f9c61de",
        "name": "Divice id",
        "label": "Divice id",
        "tooltip": "",
        "group": "08691a1abdc449f7",
        "order": 8,
        "width": 8,
        "height": 2,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "device_id",
        "sendOnBlur": true,
        "className": "text_input",
        "topicType": "str",
        "x": 920,
        "y": 1420,
        "wires": [
            [
                "33c8b93809af5d71"
            ]
        ]
    },
    {
        "id": "33c8b93809af5d71",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "setDeviceLocalion",
        "func": "let tempUserCreds = global.get('tempUserCreds') || {};\n\ntempUserCreds = Object.assign(tempUserCreds, { [msg.topic]: msg.payload })\nglobal.set('tempUserCreds', tempUserCreds)\n\nlet obj = {}\nobj.payload = tempUserCreds\nreturn obj",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "583517f12510f63c",
        "type": "inject",
        "z": "692c798b6f9c61de",
        "name": "",
        "props": [
            {
                "p": "payload.connectionStatus",
                "v": "MQTT: Connection OFF",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 290,
        "y": 840,
        "wires": [
            [
                "6cc4dd7e4806e9e6"
            ]
        ]
    },
    {
        "id": "4eec54e042c9d037",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "handleSetDateTime-Ack",
        "func": "let ackInfo = {}\nlet messageId = global.get(\"messageId\")\n\n\nif (messageId === msg.payload.message_id) {\n    if (msg.payload.result.errorNo === 0) {\n        ackInfo.topic = \"Success\"\n        ackInfo.result = \"success\"\n        ackInfo.payload = \"Done\"\n\n\n    } else {\n        ackInfo.topic = \"Error\"\n        ackInfo.result = \"error\"\n        ackInfo.payload = \"Error\"\n\n    }\n}\n\nreturn ackInfo;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 1260,
        "wires": [
            [
                "d969e40c2e543dae"
            ]
        ]
    },
    {
        "id": "11dce9d495d2d8b5",
        "type": "ui_template",
        "z": "692c798b6f9c61de",
        "group": "fc491a4cada0492f",
        "name": "Head section",
        "order": 43,
        "width": 0,
        "height": 0,
        "format": "<style>\n    .text_input, .nr-dashboard-ui_text-input {\n        border: solid;\n        border-width: 3px;\n        font-size: 22px;\n        font-weight: 600;\n        padding: 20px 0 20px 0;\n\n    }\n\n    .dropdown_input {\n        border: solid;\n        border-width: 3px;\n        font-size: 22px;\n        font-weight: 600;\n    }\n\n    .timezone {\n            border: solid;\n            border-width: 3px;\n            font-size: 22px;\n            font-weight: 600;\n    }\n\n    .timezone .label {\n        width: 20%;\n    }\n\n    \n    .label{\n        width: 90%;\n    }\n\n    .label div:nth-child(2)  {\n        font-size: 15px;\n    }\n\n    label div:nth-child(2) {\n    font-size: 15px;\n    }\n\n    .md-select-placeholder {\n    font-size: 15px;\n    }\n\n    .red .md-button {\n        background-color: red !important;\n    }\n\n\n\n\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 90,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "e819dd139f9e98f4",
        "type": "ui_button",
        "z": "692c798b6f9c61de",
        "name": "Card Options",
        "group": "fc491a4cada0492f",
        "order": 4,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Card Options",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "settings_btn",
        "icon": "",
        "payload": "{\"group\":{\"hide\":[\"AIR-CR_Control\",\"AIR-CR_Connection\",\"AIR-CR_Simple_settings\",\"AIR-CR_Advanced_settings\",\"AIR-CR_r0\",\"AIR-CR_r1\",\"AIR-CR_submit\"],\"show\":[\"AIR-CR_schedule\"]}}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 4010,
        "y": 1580,
        "wires": [
            [
                "f35f7ebd59ad5459"
            ]
        ]
    },
    {
        "id": "c7f4ea3c6543a538",
        "type": "ui_text_input",
        "z": "692c798b6f9c61de",
        "d": true,
        "name": "End",
        "label": "End",
        "tooltip": "",
        "group": "523171b4c91e1d14",
        "order": 25,
        "width": 5,
        "height": 2,
        "passthru": true,
        "mode": "time",
        "delay": 300,
        "topic": "TmEnd",
        "sendOnBlur": true,
        "className": "text_input",
        "topicType": "str",
        "x": 290,
        "y": 1600,
        "wires": [
            []
        ]
    },
    {
        "id": "3880a03920b6f99c",
        "type": "ui_text_input",
        "z": "692c798b6f9c61de",
        "name": "Location",
        "label": "Location",
        "tooltip": "",
        "group": "08691a1abdc449f7",
        "order": 7,
        "width": 8,
        "height": 2,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "location",
        "sendOnBlur": true,
        "className": "text_input",
        "topicType": "str",
        "x": 920,
        "y": 1380,
        "wires": [
            [
                "33c8b93809af5d71"
            ]
        ]
    },
    {
        "id": "9c089a6faed821bd",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "persistMqttSettings",
        "func": "let mqttSettings = global.get('mqtt_settings')\nlet json = {}\njson.host = mqttSettings.host\njson.port = mqttSettings.port\njson.username = mqttSettings.username\njson.password = mqttSettings.password\n\nmsg.payload = json\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 940,
        "wires": [
            [
                "a854989e94536e41"
            ]
        ]
    },
    {
        "id": "a854989e94536e41",
        "type": "file",
        "z": "692c798b6f9c61de",
        "name": "persistMqttSettings",
        "filename": ".lumiring/air_cr/mqtt_settings.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 630,
        "y": 980,
        "wires": [
            [
                "1090c7446b008215"
            ]
        ]
    },
    {
        "id": "a60e7bd06fc144ab",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 1",
        "func": "let obj = JSON.parse(msg.payload)\n\nglobal.set('door_settings', obj.door_settings)\nglobal.set('device_set_idxs', obj.device_set_idxs)\nglobal.set('time_settings', obj.time_settings)\nglobal.set('rd_0_set', obj.reader_1_settings)\nglobal.set('rd_1_set', obj.reader_2_settings)\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "03faeb90bf849ef1",
        "type": "file in",
        "z": "692c798b6f9c61de",
        "name": "",
        "filename": ".lumiring/air_cr/door_settings.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 560,
        "y": 200,
        "wires": [
            [
                "a60e7bd06fc144ab"
            ]
        ]
    },
    {
        "id": "90a7f4cb9c95b7d0",
        "type": "fs-access",
        "z": "692c798b6f9c61de",
        "name": "readDoorSettings",
        "path": ".lumiring/air_cr/door_settings.json",
        "pathType": "str",
        "filename": "filename",
        "filenameType": "msg",
        "accessRead": true,
        "accessWrite": true,
        "x": 270,
        "y": 240,
        "wires": [
            [
                "03faeb90bf849ef1"
            ],
            [
                "662967311ea5753e"
            ]
        ]
    },
    {
        "id": "edb0b7232f72600a",
        "type": "inject",
        "z": "692c798b6f9c61de",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 240,
        "wires": [
            [
                "90a7f4cb9c95b7d0"
            ]
        ]
    },
    {
        "id": "662967311ea5753e",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 2",
        "func": "\nglobal.set('door_settings', {\n    Door_sens_opt: 0,\n    Door_sens_idx: 0,\n    Door_sens_Condition: 0,\n    Button_rex_opt: 0,\n    Button_rex_idx: 1,\n    Button_rex_Condition: 1,\n    Lock_Relay_opt: 0,\n    Lock_Relay_idx: 0,\n    Door_Lock_mode: 0,\n    Door_Lock_type: 0,\n    Door_Lock_puls: 200,\n    Door_Delay: 5,\n    Door_Sens_Autolock: false\n})\nglobal.set('device_set_idxs', {\n    Control_point_idx: 1001,\n    Rd1_idx: 2002,\n    Rd0_idx: 2001\n})\nglobal.set('time_settings', {\n    DST_GMT: true,\n    tz: \"GMT0\"\n})\nglobal.set('rd_0_set', {\n    Rd_opt: 1,\n    Rd_Direction: 0,\n    Rd_Key_endian: false,\n    Rd_beep: true,\n    Rd_Wg_type: 3\n})\nglobal.set('rd_1_set', {\n    Rd_opt: 1,\n    Rd_Direction: 1,\n    Rd_Key_endian: true,\n    Rd_beep: true,\n    Rd_Wg_type: 3\n})\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "b417a70c3198d0ed",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "function 3",
        "func": "let device_set_idxs = global.get('device_set_idxs')\nmsg.payload = device_set_idxs.Rd0_idx\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 2820,
        "wires": [
            [
                "3c691a45025ba009"
            ]
        ]
    },
    {
        "id": "3bdcb9943af21e2d",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "function 4",
        "func": "let device_set_idxs = global.get('device_set_idxs')\nmsg.payload = device_set_idxs.Rd1_idx\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 2860,
        "wires": [
            [
                "4d74c64a6d551fbf"
            ]
        ]
    },
    {
        "id": "3ea8d5ce08c43c52",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "function 5",
        "func": "let device_set_idxs = global.get('device_set_idxs')\nmsg.payload = device_set_idxs.Control_point_idx\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 2900,
        "wires": [
            [
                "5876e97090ffded2"
            ]
        ]
    },
    {
        "id": "3546195198d65dd9",
        "type": "complete",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "",
        "scope": [
            "a60e7bd06fc144ab",
            "662967311ea5753e"
        ],
        "uncaught": false,
        "x": 1350,
        "y": 3140,
        "wires": [
            [
                "b417a70c3198d0ed",
                "3bdcb9943af21e2d",
                "3ea8d5ce08c43c52",
                "081099f2b9125117",
                "0ada4d37954ca264",
                "0b438b611b9e4e71",
                "0b04359872cec0ac",
                "234a95ed4ea353eb",
                "85dc3035ed5f5a74",
                "6010b0a9f46e8715",
                "dbea2a03332b56f1",
                "f1522977cf923a4f",
                "fb853ec8a9a2aa56",
                "a6acf6655b8e75ce",
                "fae441eff2294cea",
                "b69c4fad23abed38",
                "69a80012105d56fc",
                "2f92527cf6cd24ad"
            ]
        ]
    },
    {
        "id": "081099f2b9125117",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "function 6",
        "func": "let door_settings = global.get('door_settings')\nmsg.payload = door_settings.Door_sens_opt\nmsg.enabled = false\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 2960,
        "wires": [
            [
                "8d0f58b9725145dc"
            ]
        ]
    },
    {
        "id": "0ada4d37954ca264",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "function 7",
        "func": "let door_settings = global.get('door_settings')\nmsg.payload = door_settings.Door_sens_idx\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 3000,
        "wires": [
            [
                "061aecc325f2ccf3"
            ]
        ]
    },
    {
        "id": "0b438b611b9e4e71",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "function 8",
        "func": "let door_settings = global.get('door_settings')\nmsg.payload = door_settings.Door_sens_Condition\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 3040,
        "wires": [
            [
                "84d7a118ddd9842f"
            ]
        ]
    },
    {
        "id": "0b04359872cec0ac",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "function 9",
        "func": "let door_settings = global.get('door_settings')\nmsg.payload = door_settings.Button_rex_opt\nmsg.enabled = false\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 3080,
        "wires": [
            [
                "b21a19bb0acbfa9c"
            ]
        ]
    },
    {
        "id": "234a95ed4ea353eb",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "function 10",
        "func": "let door_settings = global.get('door_settings')\nmsg.payload = door_settings.Button_rex_idx\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 3120,
        "wires": [
            [
                "b2474e59834ac54b"
            ]
        ]
    },
    {
        "id": "85dc3035ed5f5a74",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "function 11",
        "func": "let door_settings = global.get('door_settings')\nmsg.payload = door_settings.Button_rex_Condition\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 3160,
        "wires": [
            [
                "1dc6ecb687b4c702"
            ]
        ]
    },
    {
        "id": "6010b0a9f46e8715",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "function 12",
        "func": "let door_settings = global.get('door_settings')\nmsg.payload = door_settings.Lock_Relay_opt\nmsg.enabled = false\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 3200,
        "wires": [
            [
                "00ecd6dbee19221f"
            ]
        ]
    },
    {
        "id": "dbea2a03332b56f1",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "function 13",
        "func": "let door_settings = global.get('door_settings')\nmsg.payload = door_settings.Lock_Relay_idx\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 3240,
        "wires": [
            [
                "9511360cabc09665"
            ]
        ]
    },
    {
        "id": "f1522977cf923a4f",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "function 14",
        "func": "let door_settings = global.get('door_settings')\nmsg.payload = door_settings.Door_Lock_mode\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 3280,
        "wires": [
            [
                "4a42fef97bd379c2"
            ]
        ]
    },
    {
        "id": "fb853ec8a9a2aa56",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "function 15",
        "func": "let door_settings = global.get('door_settings')\nmsg.payload = door_settings.Door_Lock_type\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 3320,
        "wires": [
            [
                "297191ec56ab0272"
            ]
        ]
    },
    {
        "id": "a6acf6655b8e75ce",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "function 16",
        "func": "let door_settings = global.get('door_settings')\nmsg.payload = door_settings.Door_Lock_puls\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 3360,
        "wires": [
            [
                "d8697b4c53aa26a1"
            ]
        ]
    },
    {
        "id": "fae441eff2294cea",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "function 17",
        "func": "let door_settings = global.get('door_settings')\nmsg.payload = door_settings.Door_Delay\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 3400,
        "wires": [
            [
                "d0c523e32a8ea14f"
            ]
        ]
    },
    {
        "id": "b69c4fad23abed38",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "function 18",
        "func": "let door_settings = global.get('door_settings')\nmsg.payload = door_settings.Door_Sens_Autolock\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 3440,
        "wires": [
            [
                "b083bea11642642c"
            ]
        ]
    },
    {
        "id": "69a80012105d56fc",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "function 19",
        "func": "let time_settings = global.get('time_settings')\nmsg.payload = time_settings.DST_GMT\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 3480,
        "wires": [
            [
                "ebf4caecba2c3b0f"
            ]
        ]
    },
    {
        "id": "2f92527cf6cd24ad",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "b2d513ab7bca448d",
        "name": "function 20",
        "func": "let time_settings = global.get('time_settings')\nmsg.payload = time_settings.tz\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 3520,
        "wires": [
            [
                "1decd6fb7be79a57"
            ]
        ]
    },
    {
        "id": "e8e91cdbbb5ed6c9",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 21",
        "func": "let obj = JSON.parse(msg.payload)\n\n\nglobal.set('mqtt_settings', obj)\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "91fbbfa1127d9d40",
        "type": "file in",
        "z": "692c798b6f9c61de",
        "name": "",
        "filename": ".lumiring/air_cr/mqtt_settings.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 560,
        "y": 300,
        "wires": [
            [
                "e8e91cdbbb5ed6c9"
            ]
        ]
    },
    {
        "id": "70a3ca8c2448c43c",
        "type": "fs-access",
        "z": "692c798b6f9c61de",
        "name": "readMqttSettings",
        "path": ".lumiring/air_cr/mqtt_settings.json",
        "pathType": "str",
        "filename": "filename",
        "filenameType": "msg",
        "accessRead": true,
        "accessWrite": true,
        "x": 270,
        "y": 320,
        "wires": [
            [
                "91fbbfa1127d9d40"
            ],
            [
                "8096f0b5ec80a327"
            ]
        ]
    },
    {
        "id": "8096f0b5ec80a327",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 22",
        "func": "\nglobal.set('mqtt_settings', {\n    host: \"\",\n    port: 1883,\n    username: \"\",\n    password: \"\"\n})\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "3280cc3ecd2f397a",
        "type": "inject",
        "z": "692c798b6f9c61de",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 320,
        "wires": [
            [
                "70a3ca8c2448c43c"
            ]
        ]
    },
    {
        "id": "afdc7c0ee76e4a47",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 23",
        "func": "let mqtt_settings = global.get('mqtt_settings')\nmsg.payload = mqtt_settings.host\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1200,
        "wires": [
            [
                "0c769e6742acebb0"
            ]
        ]
    },
    {
        "id": "99ae61b360355f68",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 24",
        "func": "let mqtt_settings = global.get('mqtt_settings')\nmsg.payload = mqtt_settings.port\nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1240,
        "wires": [
            [
                "a122ea34e40556e4"
            ]
        ]
    },
    {
        "id": "f74a6a22480189cc",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 25",
        "func": "let mqtt_settings = global.get('mqtt_settings')\nmsg.payload = mqtt_settings.username\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1280,
        "wires": [
            [
                "ad3a558f7afdccbf"
            ]
        ]
    },
    {
        "id": "53da7a211480283e",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 26",
        "func": "let mqtt_settings = global.get('mqtt_settings')\nmsg.payload = mqtt_settings.password\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1320,
        "wires": [
            [
                "58d2480b2eff322c"
            ]
        ]
    },
    {
        "id": "4389b92844310dbf",
        "type": "complete",
        "z": "692c798b6f9c61de",
        "name": "",
        "scope": [
            "8096f0b5ec80a327",
            "e8e91cdbbb5ed6c9"
        ],
        "uncaught": false,
        "x": 170,
        "y": 1320,
        "wires": [
            [
                "a7a7b24370fc4997"
            ]
        ]
    },
    {
        "id": "a7a7b24370fc4997",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 27",
        "func": "msg.status = {}\nmsg.status.text = \"start\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1320,
        "wires": [
            [
                "642df87e4871a1c4"
            ]
        ]
    },
    {
        "id": "295e536ea69e5521",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 28",
        "func": "let obj = JSON.parse(msg.payload)\n\n\nglobal.set('userCreds', obj)\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "c6ff52813f3e6a3c",
        "type": "file in",
        "z": "692c798b6f9c61de",
        "name": "",
        "filename": ".lumiring/air_cr/device_location.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 560,
        "y": 380,
        "wires": [
            [
                "295e536ea69e5521"
            ]
        ]
    },
    {
        "id": "423c33113f0cb4de",
        "type": "fs-access",
        "z": "692c798b6f9c61de",
        "name": "readDeviceLocation",
        "path": ".lumiring/air_cr/device_location.json",
        "pathType": "str",
        "filename": "filename",
        "filenameType": "msg",
        "accessRead": true,
        "accessWrite": true,
        "x": 280,
        "y": 400,
        "wires": [
            [
                "c6ff52813f3e6a3c"
            ],
            []
        ]
    },
    {
        "id": "009238de90d962c6",
        "type": "inject",
        "z": "692c798b6f9c61de",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 400,
        "wires": [
            [
                "423c33113f0cb4de"
            ]
        ]
    },
    {
        "id": "1090c7446b008215",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "persistDeviceLocation",
        "func": "let mqttSettings = global.get('userCreds')\nlet json = {}\njson.location = mqttSettings.location\njson.device_id = mqttSettings.device_id\nmsg.payload = json\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1040,
        "wires": [
            [
                "65727af8ca7694b4"
            ]
        ]
    },
    {
        "id": "65727af8ca7694b4",
        "type": "file",
        "z": "692c798b6f9c61de",
        "name": "persistMqttSettings",
        "filename": ".lumiring/air_cr/device_location.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 650,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "be4ec194f59155d0",
        "type": "complete",
        "z": "692c798b6f9c61de",
        "name": "",
        "scope": [
            "295e536ea69e5521"
        ],
        "uncaught": false,
        "x": 170,
        "y": 1400,
        "wires": [
            [
                "45dadb28c9284a55",
                "9711d2389203650e"
            ]
        ]
    },
    {
        "id": "45dadb28c9284a55",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 30",
        "func": "let userCreds = global.get('userCreds')\nmsg.payload = userCreds.location\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1380,
        "wires": [
            [
                "3880a03920b6f99c"
            ]
        ]
    },
    {
        "id": "9711d2389203650e",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 31",
        "func": "let userCreds = global.get('userCreds')\nmsg.payload = userCreds.device_id\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1420,
        "wires": [
            [
                "28a1c7a16938fbb3"
            ]
        ]
    },
    {
        "id": "f07f82bb51cacf2a",
        "type": "ui_text_input",
        "z": "692c798b6f9c61de",
        "name": "Schedule name",
        "label": "Schedule name",
        "tooltip": "",
        "group": "523171b4c91e1d14",
        "order": 10,
        "width": 11,
        "height": 2,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "name",
        "sendOnBlur": true,
        "className": "text_input",
        "topicType": "str",
        "x": 600,
        "y": 1700,
        "wires": [
            [
                "1858ddfbf99a4971"
            ]
        ]
    },
    {
        "id": "eaee67ff04b85c54",
        "type": "ui_button",
        "z": "692c798b6f9c61de",
        "name": "Add daily schedule",
        "group": "523171b4c91e1d14",
        "order": 22,
        "width": 11,
        "height": 1,
        "passthru": false,
        "label": "Add daily schedule",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "topicType": "str",
        "x": 210,
        "y": 1940,
        "wires": [
            [
                "d4b89e18ef3a2264"
            ]
        ]
    },
    {
        "id": "1858ddfbf99a4971",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "setSchedule",
        "func": "let schedule = global.get('schedule') || {};\nschedule = Object.assign(schedule, { [msg.topic]: msg.payload })\n\nglobal.set('schedule', schedule)\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1720,
        "wires": [
            []
        ]
    },
    {
        "id": "d4b89e18ef3a2264",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "addSchedule",
        "func": "let timezone_delta = new Date().getTimezoneOffset()*60\nconsole.log(timezone_delta)\n\nlet device_set_idxs = global.get('device_set_idxs')\nlet userCreds = global.get('userCreds');\n\nlet schedule_instance = RED.util.cloneMessage(global.get('schedule'))\n\n\nlet schedule_to_mqtt = {}\n\n\nschedule_to_mqtt.TmStart = schedule_instance.TmStart / 1000\nschedule_to_mqtt.TmEnd = schedule_instance.TmEnd / 1000\n\n\n\nschedule_to_mqtt.TmStart +=  (10800 + timezone_delta)\nschedule_to_mqtt.TmEnd += (10800 + timezone_delta)\n\n\nschedule_to_mqtt.TmStart = schedule_to_mqtt.TmStart.toString()\nschedule_to_mqtt.TmEnd = schedule_to_mqtt.TmEnd.toString()\n\nschedule_to_mqtt.Ctp_idx = schedule_instance.Ctp_idx\nschedule_to_mqtt.Shedule_id = Math.floor(Math.random() * 2147483647)\n\n\nlet globalTopic = userCreds.location + \"/\" + userCreds.device_id + \"/\"\n\nlet msgWrapper = {}\nmsgWrapper.operator = \"SetSdlDaily\"\nmsgWrapper.session_id = \"0\"\nmsgWrapper.message_id = Math.floor(Math.random() * 1692797271182).toString()\n\nmsgWrapper.info = RED.util.cloneMessage(schedule_to_mqtt)\nmsg.payload = msgWrapper\nmsg.topic = globalTopic + \"Operate\" + \"/\"\nglobal.set('messageId', msgWrapper.message_id)\n\nschedule_to_mqtt.name = schedule_instance.name\nglobal.set(\"schedule_instance\", schedule_to_mqtt)\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1940,
        "wires": [
            [
                "c6f8198164b0ed6e"
            ]
        ]
    },
    {
        "id": "c6f8198164b0ed6e",
        "type": "mqtt out",
        "z": "692c798b6f9c61de",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "79737e067a3af084",
        "x": 730,
        "y": 1940,
        "wires": []
    },
    {
        "id": "a07a6a7f1f8b3b3f",
        "type": "switch",
        "z": "692c798b6f9c61de",
        "name": "",
        "property": "result",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "error",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "success",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1950,
        "y": 1440,
        "wires": [
            [
                "a5009491338db9ad"
            ],
            [
                "092fbd16dc09d3e3",
                "a5009491338db9ad"
            ]
        ]
    },
    {
        "id": "a5009491338db9ad",
        "type": "ui_toast",
        "z": "692c798b6f9c61de",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Ack info",
        "x": 2140,
        "y": 1400,
        "wires": []
    },
    {
        "id": "092fbd16dc09d3e3",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 34",
        "func": "let schedule_instance = global.get('schedule_instance')\nlet schedule_list = global.get(\"schedule_list\");\n\n\nschedule_list.list.push(schedule_instance)\n\nmsg.payload = schedule_list\nreturn [msg, schedule_instance]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2130,
        "y": 1440,
        "wires": [
            [
                "f6dffb08204572bf"
            ],
            []
        ]
    },
    {
        "id": "f60fe4acd866cd02",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 36",
        "func": "let obj = JSON.parse(msg.payload)\n\n\nglobal.set('schedule_list', obj)\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 440,
        "wires": [
            [
                "4082901c2d4ff549"
            ]
        ]
    },
    {
        "id": "c89510f1a22adf68",
        "type": "file in",
        "z": "692c798b6f9c61de",
        "name": "",
        "filename": ".lumiring/air_cr/schedule_list.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 560,
        "y": 440,
        "wires": [
            [
                "f60fe4acd866cd02"
            ]
        ]
    },
    {
        "id": "5e76e13f8720948e",
        "type": "fs-access",
        "z": "692c798b6f9c61de",
        "name": "readScheduleList",
        "path": ".lumiring/air_cr/schedule_list.json",
        "pathType": "str",
        "filename": "filename",
        "filenameType": "msg",
        "accessRead": true,
        "accessWrite": true,
        "x": 270,
        "y": 460,
        "wires": [
            [
                "c89510f1a22adf68"
            ],
            [
                "9316588f6e7f3466"
            ]
        ]
    },
    {
        "id": "9316588f6e7f3466",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 37",
        "func": "global.set('schedule_list', {list: []})\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "600fd15cb7fa4699",
        "type": "inject",
        "z": "692c798b6f9c61de",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 460,
        "wires": [
            [
                "5e76e13f8720948e"
            ]
        ]
    },
    {
        "id": "f6dffb08204572bf",
        "type": "file",
        "z": "692c798b6f9c61de",
        "name": "",
        "filename": ".lumiring/air_cr/schedule_list.json",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2420,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "b34a359c80292f28",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "handleSetSdlDaily-Ack",
        "func": "let messageId = global.get(\"messageId\")\n\nif (messageId === msg.payload.message_id) {\n    let ackInfo = {}\n    if (msg.payload.result.errorNo === 0) {\n\n        ackInfo.result = \"success\"\n        ackInfo.payload = \"Done\"\n    } else {\n\n        ackInfo.result = \"error\"\n        ackInfo.payload = \"Error\"\n    }\n    return ackInfo;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 1440,
        "wires": [
            [
                "a07a6a7f1f8b3b3f"
            ]
        ]
    },
    {
        "id": "06c80f09630e9c1f",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "setCardKey",
        "func": "let card_options = global.get('card_options') || {};\ncard_options = Object.assign(card_options, { [msg.topic]: msg.payload })\nglobal.set('card_options', card_options)",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2820,
        "wires": [
            []
        ]
    },
    {
        "id": "5a3655d37cbf67da",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "name": "Select schedule",
        "label": "Schedule:",
        "tooltip": "",
        "place": "select schedule",
        "group": "523171b4c91e1d14",
        "order": 47,
        "width": 11,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "schedule_id",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 420,
        "y": 2800,
        "wires": [
            [
                "06c80f09630e9c1f",
                "cbfed432c63d2613"
            ]
        ]
    },
    {
        "id": "cdcfb93280054d6e",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 38",
        "func": "let schedule_list = global.get(\"schedule_list\").list\n\n\nlet options = []\n\nschedule_list.forEach(function(element) {\n    options.push({[element.name]: element.Shedule_id })\n});\n\nmsg.options = options\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 2680,
        "wires": [
            [
                "5a3655d37cbf67da"
            ]
        ]
    },
    {
        "id": "13a9613731ae952f",
        "type": "complete",
        "z": "692c798b6f9c61de",
        "name": "",
        "scope": [
            "f60fe4acd866cd02",
            "9316588f6e7f3466",
            "092fbd16dc09d3e3"
        ],
        "uncaught": false,
        "x": 290,
        "y": 2680,
        "wires": [
            [
                "cdcfb93280054d6e"
            ]
        ]
    },
    {
        "id": "adfb9d881a6b97ef",
        "type": "ui_template",
        "z": "692c798b6f9c61de",
        "group": "523171b4c91e1d14",
        "name": "Add schedule",
        "order": 1,
        "width": 11,
        "height": 1,
        "format": "<style>\n    #scheduleHeader{\n        text-align: left;\n        color: #0094CE;\n        font-size: 25px;\n        font-weight: 700\n    }\n</style>\n\n\n<div id=\"scheduleHeader\">\n    Add schedule\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 600,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "11d7af559c3d0e8a",
        "type": "ui_template",
        "z": "692c798b6f9c61de",
        "group": "523171b4c91e1d14",
        "name": "Add card",
        "order": 31,
        "width": 11,
        "height": 1,
        "format": "<style>\n    #cardHeader{\n        text-align: left;\n        color: #0094CE;\n        font-size: 25px;\n        font-weight: 700\n    }\n</style>\n\n\n<div id=\"cardHeader\">\n    Add card\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 80,
        "y": 2680,
        "wires": [
            []
        ]
    },
    {
        "id": "ff147062542040ed",
        "type": "ui_template",
        "z": "692c798b6f9c61de",
        "group": "08691a1abdc449f7",
        "name": "topics Info",
        "order": 4,
        "width": 14,
        "height": 4,
        "format": "<style>\n    #topicsInfo {\n        display: flex;\n        flex-direction: column;\n        font-size: 25px;\n    }\n\n</style>\n\n<div id=\"topicsInfo\">\n    <div>{{msg.payload.events}}</div>\n    <div>{{msg.payload.operate}}</div>\n    <div>{{msg.payload.ack}}</div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1130,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "e6bc21e1b963fbf6",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 39",
        "func": "let tempUserCreds = RED.util.cloneMessage(global.get('tempUserCreds'))\nlet globalTopic = tempUserCreds.location + \"/\" + tempUserCreds.device_id + \"/\"\n\nlet obj = {}\nobj.payload = {}\n\nif (tempUserCreds.location === \"\" || tempUserCreds.device_id===null){\n    obj.payload.events = \"Events topic: N/A\"\n    obj.payload.operate = \"Operate topic: N/A\" \n    obj.payload.ack = \"Acknowledge topic: N/A\" \n} else{\n    obj.payload.events = \"Events topic: \" + tempUserCreds.location + \"/\" + tempUserCreds.device_id + \"/\" + \"Events\"\n    obj.payload.operate = \"Operate topic: \" + tempUserCreds.location + \"/\" + tempUserCreds.device_id + \"/\" + \"Operate\"\n    obj.payload.ack = \"Acknowledge topic: \" + tempUserCreds.location + \"/\" + tempUserCreds.device_id + \"/\" + \"Ack\"\n}\n\n\n\n\n\nreturn obj\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 960,
        "wires": [
            [
                "ff147062542040ed"
            ]
        ]
    },
    {
        "id": "8af952eed320495d",
        "type": "ui_text_input",
        "z": "692c798b6f9c61de",
        "name": "Key of the last card presented:",
        "label": "Key of the last card presented:",
        "tooltip": "",
        "group": "523171b4c91e1d14",
        "order": 59,
        "width": 11,
        "height": 2,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "key_hex",
        "sendOnBlur": true,
        "className": "text_input",
        "topicType": "str",
        "x": 350,
        "y": 2880,
        "wires": [
            [
                "06c80f09630e9c1f"
            ]
        ]
    },
    {
        "id": "7f3750083f1d1bb9",
        "type": "ui_button",
        "z": "692c798b6f9c61de",
        "name": "Add card",
        "group": "523171b4c91e1d14",
        "order": 62,
        "width": 11,
        "height": 1,
        "passthru": false,
        "label": "Add card",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 320,
        "y": 3220,
        "wires": [
            [
                "2f78343e81efe375"
            ]
        ]
    },
    {
        "id": "2f78343e81efe375",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "AddCard",
        "func": "let userCreds = global.get('userCreds');\nlet globalTopic = userCreds.location + \"/\" + userCreds.device_id + \"/\"\nlet card_list = RED.util.cloneMessage(global.get('cards_settings').list)\n\n// let card_list = JSON.parse(msg.payload).list\n\nfunction createKeySet(ctp_idx, schedule_id, key_id, key_hex, init, exp) {\n    return `${key_id};${ctp_idx};7;${key_hex};1;${schedule_id};1;0;-1;-1;-1;0;${init !== undefined ? init : \"0\"};${exp !== undefined ? exp : \"0\"};/`\n}\n\nfunction createCortege(arr) {\n    if (arr.length === 0) return undefined\n    let str = \"/\"\n    arr.forEach((el) => {\n        str += createKeySet(el.control_point, el.schedule_id, el.key_id, el.key_hex, el.init_time, el.exp_time)\n    })\n    return str\n}\n\nlet card_options = global.get('card_options')\n\n\ncard_options.key_id = Math.floor(Math.random() * 4294967295)\n\n\n\nlet new_card = {\n    \"cardholder_name\": card_options.cardholder_name,\n    \"control_point\": card_options.control_point,\n    \"schedule_id\": card_options.schedule_id,\n    \"key_hex\": card_options.key_hex,\n    \"key_id\": card_options.key_id,\n    \"init_time\": card_options.init_time,\n    \"exp_time\": card_options.exp_time\n    // \"init_time\": undefined,\n    // \"exp_time\": undefined\n}\n\n\nlet duplicate = card_list.find(function(el){\n    return el.key_hex === card_options.key_hex\n})\n\nif (duplicate){\n    duplicate = Object.assign(duplicate, new_card)\n} else {\n    card_list.push(new_card)\n}\n\n\n\nlet msgWrapper = {}\nmsgWrapper.operator = \"SetCardKeys\"\nmsgWrapper.session_id = \"0\"\nmsgWrapper.message_id = Math.floor(Math.random() * 1692797271182).toString()\n\nmsgWrapper.info = {}\nmsgWrapper.info.Ctp_idx = card_options.control_point\nmsgWrapper.info.KeysCount = card_list.length\nmsgWrapper.info.Keys = createCortege(card_list)\nmsgWrapper.info.KeysDataLength = msgWrapper.info.Keys.length\n\n\n\nmsg.payload = msgWrapper\nmsg.topic = globalTopic + \"Operate\" + \"/\"\nglobal.set('setCardMessId', msgWrapper.message_id)\n\nglobal.set('card_list_to_update', card_list)\nglobal.set('key_count', card_list.length)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 3220,
        "wires": [
            [
                "ccb4b2f8e2e0d3ed"
            ]
        ]
    },
    {
        "id": "ccb4b2f8e2e0d3ed",
        "type": "mqtt out",
        "z": "692c798b6f9c61de",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "79737e067a3af084",
        "x": 710,
        "y": 3260,
        "wires": []
    },
    {
        "id": "1c62bd8daee77ef6",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 40",
        "func": "let currentCardKey = global.get(\"currentCardKey\")\nmsg.payload = currentCardKey.key_hex.replace(/\\s/g, '')\n// msg.payload = msg.payload.replace(/\\s/g, '')\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 2860,
        "wires": [
            [
                "8af952eed320495d"
            ]
        ]
    },
    {
        "id": "83224f0537a00157",
        "type": "inject",
        "z": "692c798b6f9c61de",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "488af26924904fc2"
            ]
        ]
    },
    {
        "id": "488af26924904fc2",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "declareVariables",
        "func": "global.set(\"currentCardKey\", {\n    key_id: null,\n    key_hex: null\n})\n\nglobal.set(\"default_settings\", {\n    info: {\n        name: \"Cpoint_\" + Math.floor(Math.random() * 999999999).toString(),\n        input_reader: true,\n        output_reader: true\n    },\n    device_set_idxs: {\n        Control_point_idx: Math.floor(Math.random() * 4294967295)\n    },\n    door_settings: {\n        Door_sens_opt: 0,\n        Door_sens_idx: 0,\n        Door_sens_Condition: 1,\n        Button_rex_opt: 0,\n        Button_rex_idx: 1,\n        Button_rex_Condition: 1,\n        Lock_Relay_opt: 0,\n        Lock_Relay_idx: 0,\n        Door_Lock_mode: 0,\n        Door_Lock_type: 0,\n        Door_Lock_puls: 0.2,\n        Door_Delay: 5,\n        Door_Sens_Autolock: false\n    },\n    time_settings: {\n        DST_GMT: true,\n        tz: \"EET-2EEST,M3.5.0/3,M10.5.0/4\"\n    },\n    reader_1_settings: {\n        Rd_opt: 1,\n        Rd_idx: 2001,\n        Rd_Direction: 0,\n        Rd_Key_endian: false,\n        Rd_beep: true,\n        Rd_Wg_type: 3,\n        Rd_Wg_idx: 1\n    },\n    reader_2_settings: {\n        Rd_opt: 1,\n        Rd_idx: 2002,\n        Rd_Direction: 1,\n        Rd_Key_endian: false,\n        Rd_beep: true,\n        Rd_Wg_type: 3,\n        Rd_Wg_idx: 2\n    }\n})\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "32e87a6a3d7b9fae",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "handleSetCardKeys-Ack",
        "func": "let messageId = global.get(\"setCardMessId\")\n\nif (messageId === msg.payload.message_id) {\n    let ackInfo = {}\n    if (msg.payload.result.errorNo === 0) {\n        ackInfo.result = \"success\"\n        ackInfo.payload = \"Done\"\n    } else {\n\n        ackInfo.result = \"error\"\n        ackInfo.payload = \"Error\"\n    }\n    return ackInfo;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1620,
        "wires": [
            [
                "87e4455cfb6d992b"
            ]
        ]
    },
    {
        "id": "87e4455cfb6d992b",
        "type": "switch",
        "z": "692c798b6f9c61de",
        "name": "",
        "property": "result",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "error",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "success",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1990,
        "y": 1620,
        "wires": [
            [
                "e3ba3b33e28af4c1"
            ],
            [
                "40dc0361ade51989"
            ]
        ]
    },
    {
        "id": "ab9407c55052fb9e",
        "type": "ui_toast",
        "z": "692c798b6f9c61de",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Ack info",
        "x": 2180,
        "y": 1540,
        "wires": []
    },
    {
        "id": "f681efedd61143dc",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "handleEndCardKey-Ack",
        "func": "let messageId = global.get(\"setCardMessId\")\n\nif (messageId === msg.payload.message_id) {\n    let ackInfo = {}\n    if (msg.payload.result.errorNo === 0) {\n\n        ackInfo.result = \"success\"\n        ackInfo.payload = \"Done\"\n    } else {\n\n        ackInfo.result = \"error\"\n        ackInfo.payload = \"Error\"\n    }\n    return ackInfo;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1770,
        "y": 1660,
        "wires": [
            [
                "ba7550833636a73b"
            ]
        ]
    },
    {
        "id": "40dc0361ade51989",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 41",
        "func": "let userCreds = global.get('userCreds');\nlet device_set_idxs = global.get('device_set_idxs');\nlet key_count = global.get('key_count')\n\nlet globalTopic = userCreds.location + \"/\" + userCreds.device_id + \"/\"\nlet msgWrapper = {}\nmsgWrapper.operator = \"EndCardKey\"\nmsgWrapper.session_id = \"0\"\nmsgWrapper.message_id = global.get('setCardMessId')\nmsgWrapper.info = {}\nmsgWrapper.info.KeysCount = key_count\n\n\nmsg.payload = msgWrapper\nmsg.topic = globalTopic + \"Operate\" + \"/\"\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 1620,
        "wires": [
            [
                "939ee531e2a85a60"
            ]
        ]
    },
    {
        "id": "4c5d44476d630125",
        "type": "ui_toast",
        "z": "692c798b6f9c61de",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Ack info",
        "x": 2140,
        "y": 1700,
        "wires": []
    },
    {
        "id": "939ee531e2a85a60",
        "type": "mqtt out",
        "z": "692c798b6f9c61de",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "79737e067a3af084",
        "x": 2410,
        "y": 1620,
        "wires": []
    },
    {
        "id": "cbfed432c63d2613",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "showScedule",
        "func": "let schedule_list = global.get(\"schedule_list\").list\nlet instance = schedule_list.find(function (el) { return el.Shedule_id === msg.payload})\nlet obj = {}\nobj.payload = {}\n\nobj.payload.name = \"Schedule name: \" + instance.name\nobj.payload.start = \"Start time: \" + new Date(instance.TmStart * 1000).toISOString().substring(11, 16)\nobj.payload.end = \"End time: \" + new Date(instance.TmEnd * 1000).toISOString().substring(11, 16)\n\n\n\nreturn obj;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 2720,
        "wires": [
            [
                "ec0a0d0db4482c0a"
            ]
        ]
    },
    {
        "id": "ec0a0d0db4482c0a",
        "type": "ui_template",
        "z": "692c798b6f9c61de",
        "group": "523171b4c91e1d14",
        "name": "Schedule desk",
        "order": 57,
        "width": 11,
        "height": 1,
        "format": "<style>\n    #scheduleInfo {\n        display: flex;\n        font-size: 20px;\n        justify-content: space-between;\n    }\n</style>\n\n<div id=\"scheduleInfo\">\n    <div>{{msg.payload.start}}</div>\n    <div>{{msg.payload.end}}</div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 920,
        "y": 2720,
        "wires": [
            []
        ]
    },
    {
        "id": "04c1d5dbdd8f38ac",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "10f19757a09301a8",
        "name": "function 42",
        "func": "let reader_settings = global.get('rd_1_set')\nmsg.payload = reader_settings.Rd_opt\nmsg.enabled = false\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2970,
        "y": 3360,
        "wires": [
            [
                "222ca6d9f33aad97"
            ]
        ]
    },
    {
        "id": "d7d095cc69820735",
        "type": "complete",
        "z": "692c798b6f9c61de",
        "g": "10f19757a09301a8",
        "name": "",
        "scope": [
            "a60e7bd06fc144ab",
            "662967311ea5753e"
        ],
        "uncaught": false,
        "x": 2730,
        "y": 3480,
        "wires": [
            [
                "04c1d5dbdd8f38ac",
                "f3c02ad6c6c9e647",
                "7eac56fc6cc91668",
                "3eee40e5c11d9b4a",
                "35d5c1041e47bc34",
                "532a28a158a27751"
            ]
        ]
    },
    {
        "id": "f3c02ad6c6c9e647",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "10f19757a09301a8",
        "name": "function 43",
        "func": "let reader_settings = global.get('rd_1_set')\nmsg.payload = reader_settings.Rd_Direction\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2970,
        "y": 3400,
        "wires": [
            [
                "44eead080f6ff893"
            ]
        ]
    },
    {
        "id": "7eac56fc6cc91668",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "10f19757a09301a8",
        "name": "function 44",
        "func": "let reader_settings = global.get('rd_1_set')\nmsg.payload = reader_settings.Rd_Key_endian\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2970,
        "y": 3440,
        "wires": [
            [
                "2c0e5a1f061ca6fb"
            ]
        ]
    },
    {
        "id": "3eee40e5c11d9b4a",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "10f19757a09301a8",
        "name": "function 45",
        "func": "let reader_settings = global.get('rd_1_set')\nmsg.payload = reader_settings.Rd_beep\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2970,
        "y": 3480,
        "wires": [
            [
                "60f424913e84a261"
            ]
        ]
    },
    {
        "id": "35d5c1041e47bc34",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "10f19757a09301a8",
        "name": "function 46",
        "func": "let reader_settings = global.get('rd_1_set')\nmsg.payload = reader_settings.Rd_Wg_type\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2970,
        "y": 3520,
        "wires": [
            [
                "0ec93d1beaa5a9e4"
            ]
        ]
    },
    {
        "id": "532a28a158a27751",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "10f19757a09301a8",
        "name": "function 47",
        "func": "let reader_settings = global.get('rd_1_set')\nmsg.payload = reader_settings.Rd_Wg_idx\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2970,
        "y": 3560,
        "wires": [
            [
                "e5a3acd7c9ec31f5"
            ]
        ]
    },
    {
        "id": "5aa9ba6b290b2fba",
        "type": "ui_text_input",
        "z": "692c798b6f9c61de",
        "d": true,
        "g": "d658b6c01a4e944c",
        "name": "Rd_idx",
        "label": "Rd_idx",
        "tooltip": "",
        "group": "c642776b64f7474d",
        "order": 4,
        "width": 10,
        "height": 2,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Rd_idx",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3360,
        "y": 2860,
        "wires": [
            []
        ]
    },
    {
        "id": "becebef23edcbbf9",
        "type": "ui_text_input",
        "z": "692c798b6f9c61de",
        "d": true,
        "g": "d658b6c01a4e944c",
        "name": "Control_point_idx_DUMMY",
        "label": "Control_point_idx",
        "tooltip": "",
        "group": "c642776b64f7474d",
        "order": 3,
        "width": 10,
        "height": 2,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Control_point_idx",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 3300,
        "y": 2900,
        "wires": [
            []
        ]
    },
    {
        "id": "c83813488be715e7",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "g": "d658b6c01a4e944c",
        "name": "Direction (Rd_Direction)",
        "label": "Direction (Rd_Direction)",
        "tooltip": "",
        "place": "Select option",
        "group": "c642776b64f7474d",
        "order": 5,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Entry",
                "value": 0,
                "type": "num"
            },
            {
                "label": "Exit",
                "value": 1,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "Rd_Direction",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 3310,
        "y": 2980,
        "wires": [
            [
                "c8de1c77f62aa5e1"
            ]
        ]
    },
    {
        "id": "60fc553922b7b14e",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "g": "d658b6c01a4e944c",
        "name": " Reverse byte order (Rd_Key_endian)",
        "label": " Reverse byte order (Rd_Key_endian)",
        "tooltip": "",
        "place": "Select option",
        "group": "c642776b64f7474d",
        "order": 8,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "ON",
                "value": true,
                "type": "bool"
            },
            {
                "label": "OFF",
                "value": false,
                "type": "bool"
            }
        ],
        "payload": "",
        "topic": "Rd_Key_endian",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 3270,
        "y": 3020,
        "wires": [
            [
                "c8de1c77f62aa5e1"
            ]
        ]
    },
    {
        "id": "b6369bb4f44f1bb6",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "g": "d658b6c01a4e944c",
        "name": "Buzzer (Rd_beep)",
        "label": "Buzzer (Rd_beep)",
        "tooltip": "",
        "place": "Select option",
        "group": "c642776b64f7474d",
        "order": 6,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "On",
                "value": true,
                "type": "bool"
            },
            {
                "label": "Off",
                "value": false,
                "type": "bool"
            }
        ],
        "payload": "",
        "topic": "Rd_beep",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 3330,
        "y": 3060,
        "wires": [
            [
                "c8de1c77f62aa5e1"
            ]
        ]
    },
    {
        "id": "3bc21ed43f4c6e09",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "g": "d658b6c01a4e944c",
        "name": "Wiegand protocol type (Rd_Wg_type)",
        "label": "Wiegand protocol type (Rd_Wg_type)",
        "tooltip": "",
        "place": "Select option",
        "group": "c642776b64f7474d",
        "order": 7,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Wiegand 4",
                "value": 0,
                "type": "num"
            },
            {
                "label": "Wiegand 8",
                "value": 1,
                "type": "num"
            },
            {
                "label": "Wiegand 26",
                "value": 2,
                "type": "num"
            },
            {
                "label": "Wiegand 34",
                "value": 3,
                "type": "num"
            },
            {
                "label": "Wiegand 37",
                "value": 4,
                "type": "num"
            },
            {
                "label": "Wiegand 40",
                "value": 5,
                "type": "num"
            },
            {
                "label": "Wiegand 42",
                "value": 6,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "Rd_Wg_type",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 3250,
        "y": 3100,
        "wires": [
            [
                "c8de1c77f62aa5e1"
            ]
        ]
    },
    {
        "id": "c8de1c77f62aa5e1",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "d658b6c01a4e944c",
        "name": "SetRd0",
        "func": "let rdSet = global.get('rd_0_set') || {};\nrdSet = Object.assign(rdSet, { [msg.topic]: msg.payload })\nglobal.set('rd_0_set', rdSet)\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 3700,
        "y": 3000,
        "wires": [
            []
        ]
    },
    {
        "id": "71582f197379231e",
        "type": "ui_template",
        "z": "692c798b6f9c61de",
        "g": "d658b6c01a4e944c",
        "group": "c642776b64f7474d",
        "name": "Reader 1 settings",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<style>\n    #reader_1{\n        text-align: left;\n        color: green;\n        font-size: 25px;\n        font-weight: 700\n    }\n</style>\n\n\n<div id=\"reader_1\">\n    Reader 1 settings\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 3330,
        "y": 2820,
        "wires": [
            []
        ]
    },
    {
        "id": "7bbd818e1ecdb3bd",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "g": "d658b6c01a4e944c",
        "name": "Reader location (Rd_opt)",
        "label": "Reader location (Rd_opt)",
        "tooltip": "",
        "place": "Select option",
        "group": "c642776b64f7474d",
        "order": 9,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "ACU",
                "value": 1,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "Rd_opt",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 3310,
        "y": 2940,
        "wires": [
            [
                "c8de1c77f62aa5e1"
            ]
        ]
    },
    {
        "id": "aab5cc2445afa1e9",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "g": "d658b6c01a4e944c",
        "name": "Wiegand port (Rd_Wg_idx)",
        "label": "Wiegand port (Rd_Wg_idx)",
        "tooltip": "",
        "place": "Select option",
        "group": "c642776b64f7474d",
        "order": 10,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Internal",
                "value": 1,
                "type": "num"
            },
            {
                "label": "External",
                "value": 2,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "Rd_Wg_idx",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 3220,
        "y": 3140,
        "wires": [
            [
                "c8de1c77f62aa5e1"
            ]
        ]
    },
    {
        "id": "d8678eed801b4b21",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "d658b6c01a4e944c",
        "name": "function 48",
        "func": "let reader_settings = global.get('rd_0_set')\nmsg.payload = reader_settings.Rd_opt\nmsg.enabled = false\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2970,
        "y": 2940,
        "wires": [
            [
                "7bbd818e1ecdb3bd"
            ]
        ]
    },
    {
        "id": "06889269c967e362",
        "type": "complete",
        "z": "692c798b6f9c61de",
        "g": "d658b6c01a4e944c",
        "name": "",
        "scope": [
            "a60e7bd06fc144ab",
            "662967311ea5753e"
        ],
        "uncaught": false,
        "x": 2730,
        "y": 3060,
        "wires": [
            [
                "d8678eed801b4b21",
                "43d817f891639128",
                "0367491b11713191",
                "67fc5cf6173b0259",
                "24d296461956b528",
                "cf8bb1c46db881f8"
            ]
        ]
    },
    {
        "id": "43d817f891639128",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "d658b6c01a4e944c",
        "name": "function 49",
        "func": "let reader_settings = global.get('rd_0_set')\nmsg.payload = reader_settings.Rd_Direction\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2970,
        "y": 2980,
        "wires": [
            [
                "c83813488be715e7"
            ]
        ]
    },
    {
        "id": "0367491b11713191",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "d658b6c01a4e944c",
        "name": "function 50",
        "func": "let reader_settings = global.get('rd_0_set')\nmsg.payload = reader_settings.Rd_Key_endian\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2970,
        "y": 3020,
        "wires": [
            [
                "60fc553922b7b14e"
            ]
        ]
    },
    {
        "id": "67fc5cf6173b0259",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "d658b6c01a4e944c",
        "name": "function 51",
        "func": "let reader_settings = global.get('rd_0_set')\nmsg.payload = reader_settings.Rd_beep\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2970,
        "y": 3060,
        "wires": [
            [
                "b6369bb4f44f1bb6"
            ]
        ]
    },
    {
        "id": "24d296461956b528",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "d658b6c01a4e944c",
        "name": "function 52",
        "func": "let reader_settings = global.get('rd_0_set')\nmsg.payload = reader_settings.Rd_Wg_type\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2970,
        "y": 3100,
        "wires": [
            [
                "3bc21ed43f4c6e09"
            ]
        ]
    },
    {
        "id": "cf8bb1c46db881f8",
        "type": "function",
        "z": "692c798b6f9c61de",
        "g": "d658b6c01a4e944c",
        "name": "function 53",
        "func": "let reader_settings = global.get('rd_0_set')\nmsg.payload = reader_settings.Rd_Wg_idx\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2970,
        "y": 3140,
        "wires": [
            [
                "aab5cc2445afa1e9"
            ]
        ]
    },
    {
        "id": "b41158a68dfc5a8f",
        "type": "ui_button",
        "z": "692c798b6f9c61de",
        "name": "Settings",
        "group": "fc491a4cada0492f",
        "order": 3,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Access Control Point",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "settings_btn",
        "icon": "",
        "payload": "{\"group\":{\"hide\":[\"AIR-CR_Control\",\"AIR-CR_Connection\",\"AIR-CR_schedule\",\"AIR-CR_Advanced_settings\",\"AIR-CR_r0\",\"AIR-CR_r1\",\"AIR-CR_submit\"],\"show\":[\"AIR-CR_Simple_settings\"]}}",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 4000,
        "y": 1540,
        "wires": [
            [
                "f35f7ebd59ad5459"
            ]
        ]
    },
    {
        "id": "0601d627be2326ac",
        "type": "ui_text_input",
        "z": "692c798b6f9c61de",
        "name": "Control point name",
        "label": "Control point name",
        "tooltip": "",
        "group": "b5b06fdb86579748",
        "order": 6,
        "width": 10,
        "height": 2,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "name",
        "sendOnBlur": true,
        "className": "text_input",
        "topicType": "str",
        "x": 910,
        "y": 3800,
        "wires": [
            [
                "6f5df0aece82fdd9"
            ]
        ]
    },
    {
        "id": "82d84b53c9ef14eb",
        "type": "ui_template",
        "z": "692c798b6f9c61de",
        "group": "b5b06fdb86579748",
        "name": "OR Settings",
        "order": 12,
        "width": 15,
        "height": 1,
        "format": "<style>\n    #OutputReader {\n        text-align: left;\n        color: #0094CE;\n        font-size: 25px;\n        font-weight: 700\n    }\n</style>\n\n\n<div id=\"OutputReader\">\n    Exit reader settings\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 890,
        "y": 3920,
        "wires": [
            []
        ]
    },
    {
        "id": "5987ebc432c3d3bc",
        "type": "ui_template",
        "z": "692c798b6f9c61de",
        "group": "b5b06fdb86579748",
        "name": "IR Settings",
        "order": 11,
        "width": 15,
        "height": 1,
        "format": "<style>\n    #InputReader {\n        text-align: left;\n        color: #0094CE;\n        font-size: 25px;\n        font-weight: 700\n    }\n</style>\n\n\n<div id=\"InputReader\">\n    Entry reader settings\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 890,
        "y": 4040,
        "wires": [
            []
        ]
    },
    {
        "id": "84507c7374840699",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "name": "IR Reverse byte order (Rd_Key_endian)",
        "label": "Reverse byte order",
        "tooltip": "",
        "place": "Select option",
        "group": "b5b06fdb86579748",
        "order": 13,
        "width": 8,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "ON",
                "value": true,
                "type": "bool"
            },
            {
                "label": "OFF",
                "value": false,
                "type": "bool"
            }
        ],
        "payload": "",
        "topic": "Rd_Key_endian",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 980,
        "y": 4080,
        "wires": [
            [
                "bcb61ab8f00a2478"
            ]
        ]
    },
    {
        "id": "fdf58eb0529e87d4",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "name": " OR Reverse byte order (Rd_Key_endian)",
        "label": "Reverse byte order",
        "tooltip": "",
        "place": "Select option",
        "group": "b5b06fdb86579748",
        "order": 15,
        "width": 8,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "ON",
                "value": true,
                "type": "bool"
            },
            {
                "label": "OFF",
                "value": false,
                "type": "bool"
            }
        ],
        "payload": "",
        "topic": "Rd_Key_endian",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 980,
        "y": 3960,
        "wires": [
            [
                "3190b74c02239e23"
            ]
        ]
    },
    {
        "id": "7c1d7e49523a72de",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "name": "OR Wiegand port (Rd_Wg_idx)",
        "label": "Wiegand port",
        "tooltip": "",
        "place": "Select option",
        "group": "b5b06fdb86579748",
        "order": 16,
        "width": 7,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Internal",
                "value": 1,
                "type": "num"
            },
            {
                "label": "External",
                "value": 2,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "Rd_Wg_idx",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 950,
        "y": 4000,
        "wires": [
            [
                "3190b74c02239e23"
            ]
        ]
    },
    {
        "id": "1049fe0d5aa63d8e",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "name": "IR Wiegand port (Rd_Wg_idx)",
        "label": "Wiegand port",
        "tooltip": "",
        "place": "Select option",
        "group": "b5b06fdb86579748",
        "order": 14,
        "width": 7,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Internal",
                "value": 1,
                "type": "num"
            },
            {
                "label": "External",
                "value": 2,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "Rd_Wg_idx",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 950,
        "y": 4120,
        "wires": [
            [
                "bcb61ab8f00a2478"
            ]
        ]
    },
    {
        "id": "2ea7b7c6270d5ebb",
        "type": "ui_template",
        "z": "692c798b6f9c61de",
        "group": "b5b06fdb86579748",
        "name": "Lock settings",
        "order": 18,
        "width": 0,
        "height": 0,
        "format": "<style>\n    #Lock {\n        text-align: left;\n        color: #0094CE;\n        font-size: 25px;\n        font-weight: 700\n    }\n</style>\n\n\n<div id=\"Lock\">\n    Lock settings\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 890,
        "y": 4160,
        "wires": [
            []
        ]
    },
    {
        "id": "092ad2d4e05e6f38",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "name": "Lock relay index (Lock_Relay_idx)",
        "label": "Lock out",
        "tooltip": "",
        "place": "Select option",
        "group": "b5b06fdb86579748",
        "order": 19,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Grey",
                "value": 0,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "Lock_Relay_idx",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 960,
        "y": 4200,
        "wires": [
            [
                "9fc7e6688e61a606"
            ]
        ]
    },
    {
        "id": "758369828faf4d49",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "name": "Door lock mode (Door_Lock_mode)",
        "label": "Work mode",
        "tooltip": "",
        "place": "Select option",
        "group": "b5b06fdb86579748",
        "order": 20,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "trigger",
                "value": 0,
                "type": "num"
            },
            {
                "label": "impulse",
                "value": 1,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "Door_Lock_mode",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 960,
        "y": 4240,
        "wires": [
            [
                "9fc7e6688e61a606"
            ]
        ]
    },
    {
        "id": "1ba7d629c1996369",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "name": "Door lock type (Door_Lock_type)",
        "label": "Lock type",
        "tooltip": "",
        "place": "Select option",
        "group": "b5b06fdb86579748",
        "order": 22,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Fail safe",
                "value": 0,
                "type": "num"
            },
            {
                "label": "Fail secure",
                "value": 1,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "Door_Lock_type",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 960,
        "y": 4280,
        "wires": [
            [
                "9fc7e6688e61a606"
            ]
        ]
    },
    {
        "id": "9ef9a17afa57a3e5",
        "type": "ui_text_input",
        "z": "692c798b6f9c61de",
        "name": "Impulse duration (milliseconds) (Door_Lock_puls)",
        "label": "<div>Impulse time, s.</div><div>In impulse work mode (0.25-  1)</div>",
        "tooltip": "",
        "group": "b5b06fdb86579748",
        "order": 23,
        "width": 10,
        "height": 2,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Door_Lock_puls",
        "sendOnBlur": true,
        "className": "text_input",
        "topicType": "str",
        "x": 1010,
        "y": 4320,
        "wires": [
            [
                "9fc7e6688e61a606"
            ]
        ]
    },
    {
        "id": "9c9834c73fe1f9c8",
        "type": "ui_text_input",
        "z": "692c798b6f9c61de",
        "name": "Hold duration, sec (Door_Delay)",
        "label": "<div>Door open time, s</div><div>Time allowed for an access door</div>",
        "tooltip": "",
        "group": "b5b06fdb86579748",
        "order": 24,
        "width": 10,
        "height": 2,
        "passthru": true,
        "mode": "number",
        "delay": 300,
        "topic": "Door_Delay",
        "sendOnBlur": true,
        "className": "text_input",
        "topicType": "str",
        "x": 950,
        "y": 4360,
        "wires": [
            [
                "9fc7e6688e61a606"
            ]
        ]
    },
    {
        "id": "52c4cdbb8e95e871",
        "type": "ui_template",
        "z": "692c798b6f9c61de",
        "group": "b5b06fdb86579748",
        "name": "Door sensor options",
        "order": 26,
        "width": 0,
        "height": 0,
        "format": "<style>\n    #DoorSensor {\n        text-align: left;\n        color: #0094CE;\n        font-size: 25px;\n        font-weight: 700\n    }\n</style>\n\n\n<div id=\"DoorSensor\">\n    Door sensor options\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 920,
        "y": 4440,
        "wires": [
            []
        ]
    },
    {
        "id": "28f813b1c3d96cb8",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "name": "Door Sensor Input Location (Door_sens_opt)",
        "label": "Location",
        "tooltip": "",
        "place": "Select option",
        "group": "b5b06fdb86579748",
        "order": 28,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "ACU",
                "value": 0,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "Door_sens_opt",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 990,
        "y": 4480,
        "wires": [
            [
                "9fc7e6688e61a606"
            ]
        ]
    },
    {
        "id": "2fcb7fb866b2e2c6",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "name": "Input index for door sensor (Door_sens_idx)",
        "label": "Sensor in",
        "tooltip": "",
        "place": "Select option",
        "group": "b5b06fdb86579748",
        "order": 27,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Pink",
                "value": 0,
                "type": "num"
            },
            {
                "label": "Blue",
                "value": 1,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "Door_sens_idx",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 990,
        "y": 4520,
        "wires": [
            [
                "9fc7e6688e61a606"
            ]
        ]
    },
    {
        "id": "98c57186314b92bb",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "name": "Door sensor condition (Door_sens_Condition)",
        "label": "<div>Closed door sensor status.</div><div>Set the status of sensor when door is closed<div/>",
        "tooltip": "",
        "place": "",
        "group": "b5b06fdb86579748",
        "order": 29,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Open",
                "value": 0,
                "type": "num"
            },
            {
                "label": "Close",
                "value": 1,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "Door_sens_Condition",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 1000,
        "y": 4560,
        "wires": [
            [
                "9fc7e6688e61a606"
            ]
        ]
    },
    {
        "id": "e563257c3fe5108b",
        "type": "ui_template",
        "z": "692c798b6f9c61de",
        "group": "b5b06fdb86579748",
        "name": "Exit button settings",
        "order": 31,
        "width": 0,
        "height": 0,
        "format": "<style>\n    #ExitButton {\n        text-align: left;\n        color: #0094CE;\n        font-size: 25px;\n        font-weight: 700\n    }\n</style>\n\n\n<div id=\"ExitButton\">\n    Exit button settings\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 910,
        "y": 4600,
        "wires": [
            []
        ]
    },
    {
        "id": "d370ea024eac4ba2",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "name": "Button condition (Button_rex_Condition)",
        "label": "<div>Stand-by status</div><div>Set the IN status when button is NOT pressed</div>",
        "tooltip": "",
        "place": "Select button condition",
        "group": "b5b06fdb86579748",
        "order": 33,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Open",
                "value": 0,
                "type": "num"
            },
            {
                "label": "Close",
                "value": 1,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "Button_rex_Condition",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 980,
        "y": 4640,
        "wires": [
            [
                "9fc7e6688e61a606"
            ]
        ]
    },
    {
        "id": "5231f93447f62a9b",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "name": "Input index for exit button (Button_rex_idx)",
        "label": "Button in",
        "tooltip": "",
        "place": "Select option",
        "group": "b5b06fdb86579748",
        "order": 32,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Pink",
                "value": 0,
                "type": "num"
            },
            {
                "label": "Blue",
                "value": 1,
                "type": "num"
            }
        ],
        "payload": "",
        "topic": "Button_rex_idx",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 990,
        "y": 4680,
        "wires": [
            [
                "9fc7e6688e61a606"
            ]
        ]
    },
    {
        "id": "b7aa46c670b0ebdb",
        "type": "ui_template",
        "z": "692c798b6f9c61de",
        "group": "b5b06fdb86579748",
        "name": "Timezone settings label",
        "order": 37,
        "width": 0,
        "height": 0,
        "format": "<style>\n    #Timezone{\n        text-align: left;\n        color: #0094CE;\n        font-size: 25px;\n        font-weight: 700\n    }\n</style>\n\n\n<div id=\"Timezone\">\n    Timezone settings\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 930,
        "y": 4720,
        "wires": [
            []
        ]
    },
    {
        "id": "aaa39df9dc063069",
        "type": "ui_switch",
        "z": "692c798b6f9c61de",
        "name": "Use DST/GTM (DST_GMT)",
        "label": "Use DST/GTM",
        "tooltip": "",
        "group": "b5b06fdb86579748",
        "order": 38,
        "width": 10,
        "height": 2,
        "passthru": true,
        "decouple": "false",
        "topic": "DST_GMT",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "dropdown_input",
        "x": 940,
        "y": 4760,
        "wires": [
            [
                "a3c8152adc4c7dcd"
            ]
        ]
    },
    {
        "id": "073eb22fe85ed834",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "name": "Timezone (tz)",
        "label": "Timezone",
        "tooltip": "",
        "place": "Select timezone",
        "group": "b5b06fdb86579748",
        "order": 39,
        "width": 20,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "(UTC-12:00) International Date Line West",
                "value": "<-12>12",
                "type": "str"
            },
            {
                "label": "(UTC-11:00) Coordinated Universal Time-11",
                "value": "SST11",
                "type": "str"
            },
            {
                "label": "(UTC-10:00) Aleutian Islands, Hawaii",
                "value": "HST10",
                "type": "str"
            },
            {
                "label": "(UTC-09:00) Alaska",
                "value": "<-09>9",
                "type": "str"
            },
            {
                "label": "(UTC-08:00) Pacific Time (US & Canada)",
                "value": "PST8PDT,M3.2.0,M11.1.0",
                "type": "str"
            },
            {
                "label": "(UTC-07:00) Chihuahua, La Paz, Mazatlan, Arizona",
                "value": "MST7MDT,M4.1.0,M10.5.0",
                "type": "str"
            },
            {
                "label": "(UTC-06:00) Guadalajara, Mexico City, Monterrey, Saskatchewan, Easter Island",
                "value": "CST6CDT,M4.1.0,M10.5.0",
                "type": "str"
            },
            {
                "label": "(UTC-05:00) Bogota, Lima, Quito, Rio Branco, Chetumal, Haiti, Havana",
                "value": "<-05>5",
                "type": "str"
            },
            {
                "label": "(UTC-04:00) Georgetown, La Paz, Manaus, San Juan",
                "value": "<-04>4",
                "type": "str"
            },
            {
                "label": "(UTC-03:00) Araguaina, Brasilia, Cayenne, Fortaleza, Salvador",
                "value": "<-03>3",
                "type": "str"
            },
            {
                "label": "(UTC-02:00) Mid-Atlantic - Old",
                "value": "<-02>2",
                "type": "str"
            },
            {
                "label": "(UTC-01:00) Azores",
                "value": "<-01>1<+00>,M3.5.0/0,M10.5.0/1",
                "type": "str"
            },
            {
                "label": "(UTC+00:00) Dublin, Edinburgh, Lisbon, London",
                "value": "GMT0",
                "type": "str"
            },
            {
                "label": "(UTC+01:00) Amsterdam, Berlin, Budapest, Ljubljana, Prague, Brussels, Copenhagen, Madrid, Paris",
                "value": "CET-1CEST,M3.5.0,M10.5.0/3",
                "type": "str"
            },
            {
                "label": "(UTC+02:00) Helsinki, Kyiv, Riga, Sofia, Tallinn, Vilnius, Jerusalem, Kaliningrad, Tripoli",
                "value": "EET-2EEST,M3.5.0/3,M10.5.0/4",
                "type": "str"
            },
            {
                "label": "(UTC+03:00) Kuwait, Riyadh, Baghdad, Istanbul, Minsk, Moscow, St. Petersburg, Volgograd",
                "value": "MSK-3",
                "type": "str"
            },
            {
                "label": "(UTC+03:30) Tehran",
                "value": "<+0330>-3:30<+0430>,J79/24,J263/24",
                "type": "str"
            },
            {
                "label": "(UTC+04:00) Abu Dhabi, Muscat, Astrakhan, Ulyanovsk, Baku, Izhevsk, Samara",
                "value": "<+04>-4",
                "type": "str"
            },
            {
                "label": "(UTC+04:30) Kabul",
                "value": "<+0430>-4:30",
                "type": "str"
            },
            {
                "label": "(UTC+05:00) Ashgabat, Tashkent, Ekaterinburg, Islamabad, Karachi",
                "value": "PKT-5",
                "type": "str"
            },
            {
                "label": "(UTC+06:00) Astana, Dhaka, Omsk",
                "value": "<+06>-6",
                "type": "str"
            },
            {
                "label": "(UTC+07:00) Bangkok, Hanoi, Jakarta, Barnaul, Gorno-Altaysk, Krasnoyarsk, Novosibirsk",
                "value": "<+07>-7",
                "type": "str"
            },
            {
                "label": "(UTC+08:00) Beijing, Chongqing, Hong Kong, Urumqi, Irkutsk, Kuala Lumpur, Singapore",
                "value": "HKT-8",
                "type": "str"
            },
            {
                "label": "(UTC+09:00) Chita, Osaka, Sapporo, Tokyo, Seoul, Yakutsk",
                "value": "JST-9",
                "type": "str"
            },
            {
                "label": "(UTC+09:30) Adelaide, Darwin",
                "value": "ACST-9:30",
                "type": "str"
            },
            {
                "label": "(UTC+10:00) Brisbane, Canberra, Melbourne, Sydney, Vladivostok",
                "value": "<+10>-10",
                "type": "str"
            },
            {
                "label": "(UTC+11:00) Bougainville Island, Chokurdakh, Magadan, Norfolk Island, Sakhalin",
                "value": "<+11>-11",
                "type": "str"
            },
            {
                "label": "(UTC+12:00) Anadyr, Petropavlovsk-Kamchatsky, Auckland, Wellington",
                "value": "NZST-12NZDT,M9.5.0,M4.1.0/3",
                "type": "str"
            },
            {
                "label": "(UTC+13:00) Nuku'alofa, Samoa",
                "value": "<+13>-13",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "tz",
        "topicType": "str",
        "className": "timezone",
        "x": 900,
        "y": 4800,
        "wires": [
            [
                "a3c8152adc4c7dcd"
            ]
        ]
    },
    {
        "id": "98a10bcf8f8a2ede",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "name": "Autolock (Door_Sens_Autolock)",
        "label": "<div>Autolock</div> <div>Lock door by Door Position Sensor</div>",
        "tooltip": "",
        "place": "Select option",
        "group": "b5b06fdb86579748",
        "order": 21,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "ON",
                "value": true,
                "type": "bool"
            },
            {
                "label": "OFF",
                "value": false,
                "type": "bool"
            }
        ],
        "payload": "",
        "topic": "Door_Sens_Autolock",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 950,
        "y": 4400,
        "wires": [
            [
                "9fc7e6688e61a606"
            ]
        ]
    },
    {
        "id": "b4a8d78d6ba68dcb",
        "type": "ui_template",
        "z": "692c798b6f9c61de",
        "group": "b5b06fdb86579748",
        "name": "",
        "order": 44,
        "width": 0,
        "height": 0,
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 880,
        "y": 4960,
        "wires": [
            []
        ]
    },
    {
        "id": "ae3c047e4b745ae6",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "name": "Select control point",
        "label": "Select control point",
        "tooltip": "",
        "place": "Select option",
        "group": "b5b06fdb86579748",
        "order": 1,
        "width": 19,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "dropdown_input",
        "x": 410,
        "y": 4200,
        "wires": [
            [
                "b63e03fb455d84b2",
                "9b6e645c76e64b92"
            ]
        ]
    },
    {
        "id": "eba993bfad45e534",
        "type": "ui_button",
        "z": "692c798b6f9c61de",
        "name": "Submit",
        "group": "b5b06fdb86579748",
        "order": 42,
        "width": 20,
        "height": 1,
        "passthru": false,
        "label": "Submit",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1060,
        "y": 4960,
        "wires": [
            [
                "98f21910ed797484"
            ]
        ]
    },
    {
        "id": "b63e03fb455d84b2",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 54",
        "func": "\nlet cpoint_idx = msg.payload\nlet cpoint_instance;\nif (cpoint_idx === 0){\n    cpoint_instance = RED.util.cloneMessage(global.get('default_settings'))\n    let cp_random = Math.floor(Math.random() * 2147483647)\n\n    cpoint_instance.info.name = \"Cpoint_\" + cp_random.toString()\n    cpoint_instance.device_set_idxs.Control_point_idx = cp_random\n} else {\n    let main_settings_arr = global.get('main_settings').list\n    cpoint_instance = main_settings_arr.find(function (el) { return el.device_set_idxs.Control_point_idx === msg.payload })\n}\n\n\nglobal.set(\"cpoint_instance\", cpoint_instance)\n\nreturn cpoint_instance\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 4280,
        "wires": [
            [
                "2fa1e95de24b795c",
                "cc2679d4506e3cb4",
                "01c4bada7b74ba16",
                "249c8170bcc728a6",
                "a6df0c9b3eceddfc",
                "70e4d55a04f8a7e8",
                "455d14c4fb5ea94b",
                "35650dc01ea576d8",
                "43bc89a0c56b5eac",
                "6d9e8c311223a79e",
                "734d82a1f755bc98",
                "1de98a2302ed3992",
                "ad65b12aed8dc8b3",
                "af5de4997ceb866d",
                "c1b4f944a68e0923",
                "d83c22dabbb49ac9",
                "83034b19577de322",
                "948af29ed74c2ca7",
                "837c0f31c2912143"
            ]
        ]
    },
    {
        "id": "e95f3e2f8d4f89e4",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 56",
        "func": "let obj = JSON.parse(msg.payload)\n\nglobal.set('main_settings', obj)\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "5dbbea59ec3729b2",
        "type": "file in",
        "z": "692c798b6f9c61de",
        "name": "",
        "filename": ".lumiring/air_cr/main_settings.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 560,
        "y": 540,
        "wires": [
            [
                "e95f3e2f8d4f89e4"
            ]
        ]
    },
    {
        "id": "52baa74694d72c0b",
        "type": "fs-access",
        "z": "692c798b6f9c61de",
        "name": "readMainSettings",
        "path": ".lumiring/air_cr/main_settings.json",
        "pathType": "str",
        "filename": "filename",
        "filenameType": "msg",
        "accessRead": true,
        "accessWrite": true,
        "x": 270,
        "y": 560,
        "wires": [
            [
                "5dbbea59ec3729b2"
            ],
            [
                "ff2307c110713c11"
            ]
        ]
    },
    {
        "id": "ff2307c110713c11",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 57",
        "func": "global.set('main_settings', {list: []})\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "b367354fa1091fcb",
        "type": "inject",
        "z": "692c798b6f9c61de",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 560,
        "wires": [
            [
                "52baa74694d72c0b"
            ]
        ]
    },
    {
        "id": "2fa1e95de24b795c",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 58",
        "func": "let obj = {}\nobj.payload = msg.info.name;\nreturn obj",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 3800,
        "wires": [
            [
                "0601d627be2326ac"
            ]
        ]
    },
    {
        "id": "cc2679d4506e3cb4",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 59",
        "func": "let obj = {}\nobj.payload = msg.info.input_reader;\nreturn obj",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 3840,
        "wires": [
            [
                "8e4157227de9f69c"
            ]
        ]
    },
    {
        "id": "8e4157227de9f69c",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "name": "Entry reader",
        "label": "Entry reader",
        "tooltip": "",
        "place": "Select option",
        "group": "b5b06fdb86579748",
        "order": 7,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "ON",
                "value": true,
                "type": "bool"
            },
            {
                "label": "OFF",
                "value": false,
                "type": "bool"
            }
        ],
        "payload": "",
        "topic": "input_reader",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 890,
        "y": 3840,
        "wires": [
            [
                "6f5df0aece82fdd9"
            ]
        ]
    },
    {
        "id": "6d1605e5a77008dc",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "name": "Exit reader",
        "label": "Exit reader",
        "tooltip": "",
        "place": "Select option",
        "group": "b5b06fdb86579748",
        "order": 8,
        "width": 10,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "ON",
                "value": true,
                "type": "bool"
            },
            {
                "label": "OFF",
                "value": false,
                "type": "bool"
            }
        ],
        "payload": "",
        "topic": "output_reader",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 890,
        "y": 3880,
        "wires": [
            [
                "6f5df0aece82fdd9"
            ]
        ]
    },
    {
        "id": "01c4bada7b74ba16",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 60",
        "func": "let obj = {}\nobj.payload = msg.info.output_reader;\nreturn obj",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 3880,
        "wires": [
            [
                "6d1605e5a77008dc"
            ]
        ]
    },
    {
        "id": "249c8170bcc728a6",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 61",
        "func": "let obj = {}\nobj.payload = msg.reader_1_settings.Rd_Key_endian;\n\nreturn obj",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 3960,
        "wires": [
            [
                "fdf58eb0529e87d4"
            ]
        ]
    },
    {
        "id": "a4f26692a416214e",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 62",
        "func": "let obj = {}\nobj.payload = msg.reader_1_settings.Rd_Wg_idx;\n\n\nreturn obj",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 4000,
        "wires": [
            [
                "7c1d7e49523a72de"
            ]
        ]
    },
    {
        "id": "a6df0c9b3eceddfc",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 63",
        "func": "let obj = {}\nobj.payload = msg.reader_2_settings.Rd_Key_endian;\nreturn obj",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 4080,
        "wires": [
            [
                "84507c7374840699"
            ]
        ]
    },
    {
        "id": "70e4d55a04f8a7e8",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 64",
        "func": "let obj = {}\nobj.payload = msg.reader_2_settings.Rd_Wg_idx;\nreturn obj",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 4120,
        "wires": [
            [
                "1049fe0d5aa63d8e"
            ]
        ]
    },
    {
        "id": "455d14c4fb5ea94b",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 65",
        "func": "let obj = {}\nobj.payload = msg.door_settings.Lock_Relay_idx;\nreturn obj",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 4200,
        "wires": [
            [
                "092ad2d4e05e6f38"
            ]
        ]
    },
    {
        "id": "35650dc01ea576d8",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 66",
        "func": "let obj = {}\nobj.payload = msg.door_settings.Door_Lock_mode;\nreturn obj",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 4240,
        "wires": [
            [
                "758369828faf4d49"
            ]
        ]
    },
    {
        "id": "43bc89a0c56b5eac",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 67",
        "func": "let obj = {}\nobj.payload = msg.door_settings.Door_Lock_type;\nreturn obj",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 4280,
        "wires": [
            [
                "1ba7d629c1996369"
            ]
        ]
    },
    {
        "id": "6d9e8c311223a79e",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 68",
        "func": "let obj = {}\nobj.payload = msg.door_settings.Door_Lock_puls;\nreturn obj",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 4320,
        "wires": [
            [
                "9ef9a17afa57a3e5"
            ]
        ]
    },
    {
        "id": "734d82a1f755bc98",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 69",
        "func": "let obj = {}\nobj.payload = msg.door_settings.Door_Delay;\nreturn obj",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 4360,
        "wires": [
            [
                "9c9834c73fe1f9c8"
            ]
        ]
    },
    {
        "id": "ad65b12aed8dc8b3",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 70",
        "func": "let obj = {}\nobj.payload = msg.door_settings.Door_Sens_Autolock;\nreturn obj",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 4400,
        "wires": [
            [
                "98a10bcf8f8a2ede"
            ]
        ]
    },
    {
        "id": "1de98a2302ed3992",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 71",
        "func": "let obj = {}\nobj.payload = msg.door_settings.Door_sens_opt;\nreturn obj",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 4480,
        "wires": [
            [
                "28f813b1c3d96cb8"
            ]
        ]
    },
    {
        "id": "af5de4997ceb866d",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 72",
        "func": "let obj = {}\nobj.payload = msg.door_settings.Door_sens_idx;\nreturn obj",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 4520,
        "wires": [
            [
                "2fcb7fb866b2e2c6"
            ]
        ]
    },
    {
        "id": "c1b4f944a68e0923",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 73",
        "func": "let obj = {}\nobj.payload = msg.door_settings.Door_sens_Condition;\nreturn obj",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 4560,
        "wires": [
            [
                "98c57186314b92bb"
            ]
        ]
    },
    {
        "id": "d83c22dabbb49ac9",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 74",
        "func": "let obj = {}\nobj.payload = msg.door_settings.Button_rex_idx;\nreturn obj",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 4680,
        "wires": [
            [
                "5231f93447f62a9b"
            ]
        ]
    },
    {
        "id": "83034b19577de322",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 75",
        "func": "let obj = {}\nobj.payload = msg.door_settings.Button_rex_Condition;\nreturn obj",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 4640,
        "wires": [
            [
                "d370ea024eac4ba2"
            ]
        ]
    },
    {
        "id": "948af29ed74c2ca7",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 76",
        "func": "let obj = {}\nobj.payload = msg.time_settings.DST_GMT;\nreturn obj",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 4760,
        "wires": [
            [
                "aaa39df9dc063069"
            ]
        ]
    },
    {
        "id": "837c0f31c2912143",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 77",
        "func": "let obj = {}\nobj.payload = msg.time_settings.tz;\nreturn obj",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 4800,
        "wires": [
            [
                "073eb22fe85ed834"
            ]
        ]
    },
    {
        "id": "6f5df0aece82fdd9",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 78",
        "func": "let info = global.get('cpoint_instance').info;\ninfo = Object.assign(info, { [msg.topic]: msg.payload })\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 3840,
        "wires": [
            []
        ]
    },
    {
        "id": "08d971dd14813356",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "persistMainSettings",
        "func": "let main_settings_arr = global.get('main_settings').list\nlet cpoint_instance = global.get('cpoint_instance')\n\nif (!main_settings_arr.includes(cpoint_instance)){\n    main_settings_arr.push(cpoint_instance)\n}\n\nlet obj = {}\nobj.payload = {}\nobj.payload.list = main_settings_arr\n\nreturn obj;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2410,
        "y": 1360,
        "wires": [
            [
                "5a4ff491dc97afe1"
            ]
        ]
    },
    {
        "id": "5a4ff491dc97afe1",
        "type": "file",
        "z": "692c798b6f9c61de",
        "name": "",
        "filename": ".lumiring/air_cr/main_settings.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2420,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "3190b74c02239e23",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "updateReader_1",
        "func": "let rdSet = global.get('cpoint_instance').reader_1_settings;\nrdSet = Object.assign(rdSet, { [msg.topic]: msg.payload })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 3980,
        "wires": [
            []
        ]
    },
    {
        "id": "bcb61ab8f00a2478",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "updateReader_2",
        "func": "let rdSet = global.get('cpoint_instance').reader_2_settings;\nrdSet = Object.assign(rdSet, { [msg.topic]: msg.payload })\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 4100,
        "wires": [
            []
        ]
    },
    {
        "id": "9fc7e6688e61a606",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "updateDoor",
        "func": "let door_settings = global.get('cpoint_instance').door_settings;\n\n\ndoor_settings = Object.assign(door_settings, { [msg.topic]: msg.payload })\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 4400,
        "wires": [
            []
        ]
    },
    {
        "id": "a3c8152adc4c7dcd",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "updateTime",
        "func": "let time_settings = global.get('cpoint_instance').time_settings;\ntime_settings = Object.assign(time_settings, { [msg.topic]: msg.payload })\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 4780,
        "wires": [
            []
        ]
    },
    {
        "id": "5c7f730ba49ae67c",
        "type": "mqtt out",
        "z": "692c798b6f9c61de",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "79737e067a3af084",
        "x": 1510,
        "y": 4960,
        "wires": []
    },
    {
        "id": "98f21910ed797484",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "sendMqttMessage",
        "func": "\nlet userCreds = global.get('userCreds');\nlet globalTopic = userCreds.location + \"/\" + userCreds.device_id + \"/\"\nlet cpoint_instance = RED.util.cloneMessage(global.get('cpoint_instance'))\n\n\n\nlet msgWrapper = {}\nmsgWrapper.operator = \"SetCtpDoor\"\nmsgWrapper.session_id = \"0\"\nmsgWrapper.message_id = Math.floor(Math.random() * 1692797271182).toString();\n\nmsgWrapper.info = cpoint_instance.door_settings\nmsgWrapper.info.Control_point_idx = cpoint_instance.device_set_idxs.Control_point_idx\nmsgWrapper.info.Door_Lock_puls *= 1000\n\nif (cpoint_instance.info.input_reader){\n    msgWrapper.info.Rd0_idx = cpoint_instance.reader_1_settings.Rd_idx\n    msgWrapper.info.Rd0_dir = cpoint_instance.reader_1_settings.Rd_Direction\n}\n\nif (cpoint_instance.info.output_reader) {\n    msgWrapper.info.Rd1_idx = cpoint_instance.reader_2_settings.Rd_idx\n    msgWrapper.info.Rd1_dir = cpoint_instance.reader_2_settings.Rd_Direction\n}\n\n\nmsg.payload = msgWrapper\nmsg.topic = globalTopic + \"Operate\" + \"/\"\n\nglobal.set('messageId', msgWrapper.message_id)\n\n\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 4960,
        "wires": [
            [
                "5c7f730ba49ae67c"
            ]
        ]
    },
    {
        "id": "15a5d49a78c345b7",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "updateCpointList",
        "func": "let obj = {}\n\n\nlet main_settings_arr =  global.get('main_settings').list\nlet cpointName_list = [{ \"Create new control point..\": 0 }]\n\n\nmain_settings_arr.forEach(function(element) {\n    cpointName_list.push({ [element.info.name]: element.device_set_idxs.Control_point_idx })\n});\n\n\n\nobj.options = cpointName_list\n\nreturn obj;\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 4200,
        "wires": [
            [
                "ae3c047e4b745ae6"
            ]
        ]
    },
    {
        "id": "265543961152abce",
        "type": "complete",
        "z": "692c798b6f9c61de",
        "name": "",
        "scope": [
            "e95f3e2f8d4f89e4",
            "ff2307c110713c11",
            "08d971dd14813356",
            "acfa78350ae5a985"
        ],
        "uncaught": false,
        "x": 150,
        "y": 4140,
        "wires": [
            [
                "15a5d49a78c345b7"
            ]
        ]
    },
    {
        "id": "7042bebaeb2bef2f",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 80",
        "func": "let main_settings_arr =  global.get('main_settings').list\nlet cpointName_list = []\n\nmain_settings_arr.forEach(function(element) {\n    cpointName_list.push({ [element.info.name]: element.device_set_idxs.Control_point_idx })\n});\n\n\nmsg.options = cpointName_list\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 4050,
        "y": 3020,
        "wires": [
            [
                "d843a8db1ed8bbba"
            ]
        ]
    },
    {
        "id": "ad246df039ee34ec",
        "type": "complete",
        "z": "692c798b6f9c61de",
        "name": "",
        "scope": [
            "e95f3e2f8d4f89e4",
            "ff2307c110713c11",
            "08d971dd14813356"
        ],
        "uncaught": false,
        "x": 4010,
        "y": 2960,
        "wires": [
            [
                "7042bebaeb2bef2f"
            ]
        ]
    },
    {
        "id": "d843a8db1ed8bbba",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "name": "Control point",
        "label": "Control point",
        "tooltip": "",
        "place": "Select option",
        "group": "78fe50a055b65ca2",
        "order": 2,
        "width": 14,
        "height": 2,
        "passthru": true,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 4050,
        "y": 3120,
        "wires": [
            [
                "1cbac974e1dbb470"
            ]
        ]
    },
    {
        "id": "6d9eccdf3e2e94e2",
        "type": "ui_template",
        "z": "692c798b6f9c61de",
        "group": "523171b4c91e1d14",
        "name": "Card  Tip",
        "order": 36,
        "width": 11,
        "height": 2,
        "format": "<style>\n    #CardTip {\n        display: flex;\n        flex-direction: column;\n        font-size: 24px;\n    }\n</style>\n\n<div id=\"CardTip\">\n    <div>Select the required schedule from the list and present the card to the reader to read the card code, then press \"ADD CARD\" button</div>\n\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 900,
        "y": 2760,
        "wires": [
            []
        ]
    },
    {
        "id": "3c7e43b6cf0318b5",
        "type": "ui_template",
        "z": "692c798b6f9c61de",
        "group": "523171b4c91e1d14",
        "name": "Schedule Tip",
        "order": 5,
        "width": 11,
        "height": 3,
        "format": "<style>\n    #scheduleTip {\n        display: flex;\n        flex-direction: column;\n        font-size: 25px;\n    }\n</style>\n\n<div id=\"scheduleTip\">\n    <div>This is a simple example of how to set a schedule. Set the starting and ending daily validity times for the user's card.\n    Also enter the name of the schedule.</div>\n\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 910,
        "y": 2680,
        "wires": [
            []
        ]
    },
    {
        "id": "6f68a39d47cd50b8",
        "type": "ui_table",
        "z": "692c798b6f9c61de",
        "group": "523171b4c91e1d14",
        "name": "",
        "order": 43,
        "width": 17,
        "height": 6,
        "columns": [
            {
                "field": "cardholder_name",
                "title": "Cardholder`s name",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "key_hex",
                "title": "Card code",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "schedule_name",
                "title": "Schedule",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "init_time",
                "title": " Registration date",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "exp_time",
                "title": "Expiration date",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 510,
        "y": 3340,
        "wires": [
            [
                "7431ae8e36e04646"
            ]
        ]
    },
    {
        "id": "8dce6ae63c95623d",
        "type": "ui_text_input",
        "z": "692c798b6f9c61de",
        "name": "Cardholder`s name:",
        "label": "Cardholder`s name:",
        "tooltip": "",
        "group": "523171b4c91e1d14",
        "order": 41,
        "width": 11,
        "height": 2,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "cardholder_name",
        "sendOnBlur": true,
        "className": "text_input",
        "topicType": "str",
        "x": 340,
        "y": 2940,
        "wires": [
            [
                "06c80f09630e9c1f"
            ]
        ]
    },
    {
        "id": "bc7c61c3c8b31103",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 81",
        "func": "let obj = JSON.parse(msg.payload)\nconsole.log(msg.payload)\n\n\nglobal.set('cards_settings', obj)\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "affacc68b50ace12",
        "type": "file in",
        "z": "692c798b6f9c61de",
        "name": "",
        "filename": ".lumiring/air_cr/cards.json",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 530,
        "y": 620,
        "wires": [
            [
                "bc7c61c3c8b31103"
            ]
        ]
    },
    {
        "id": "b6d5d71c1bfb77a0",
        "type": "fs-access",
        "z": "692c798b6f9c61de",
        "name": "readCardsSettings",
        "path": ".lumiring/air_cr/cards.json",
        "pathType": "str",
        "filename": "filename",
        "filenameType": "msg",
        "accessRead": true,
        "accessWrite": true,
        "x": 270,
        "y": 640,
        "wires": [
            [
                "affacc68b50ace12"
            ],
            [
                "2d05b64d67f91304"
            ]
        ]
    },
    {
        "id": "2d05b64d67f91304",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 82",
        "func": "global.set('cards_settings', {list: []})\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "d91d574378bff8cb",
        "type": "inject",
        "z": "692c798b6f9c61de",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 640,
        "wires": [
            [
                "b6d5d71c1bfb77a0"
            ]
        ]
    },
    {
        "id": "539a9b62122a5bdd",
        "type": "ui_text_input",
        "z": "692c798b6f9c61de",
        "name": "Initial time",
        "label": "Initial time:",
        "tooltip": "",
        "group": "523171b4c91e1d14",
        "order": 49,
        "width": 5,
        "height": 2,
        "passthru": true,
        "mode": "datetime-local",
        "delay": 300,
        "topic": "init_time",
        "sendOnBlur": true,
        "className": "text_input",
        "topicType": "str",
        "x": 180,
        "y": 3020,
        "wires": [
            [
                "cfdf6c6bef6b7a9a"
            ]
        ]
    },
    {
        "id": "0e8192312fa16206",
        "type": "ui_text_input",
        "z": "692c798b6f9c61de",
        "name": "Expiration time",
        "label": "Expiration time:",
        "tooltip": "",
        "group": "523171b4c91e1d14",
        "order": 51,
        "width": 5,
        "height": 2,
        "passthru": true,
        "mode": "datetime-local",
        "delay": 300,
        "topic": "exp_time",
        "sendOnBlur": true,
        "className": "text_input",
        "topicType": "str",
        "x": 160,
        "y": 3080,
        "wires": [
            [
                "38838693b9ddac8b"
            ]
        ]
    },
    {
        "id": "cd3e41f3d6b01780",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "persistCardsSettings",
        "func": "// let cards_settings_arr = global.get('cards_settings').list\n// let card_instance = global.get('card_options')\nlet card_list = global.get('card_list_to_update')\n\nconsole.log(card_list)\n\n// let instance = card_list.find(function (el) { return el.key_hex === card_instance.key_hex})\n\n\n// if (instance) {\n//     Object.assign(instance, card_instance)\n// } else {\n//     cards_settings_arr.push(card_instance)\n// }\n\n\n\nlet obj = {}\nobj.payload = { list: card_list}\n\nreturn obj;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2180,
        "y": 1660,
        "wires": [
            [
                "634cfcd97dec7739"
            ]
        ]
    },
    {
        "id": "634cfcd97dec7739",
        "type": "file",
        "z": "692c798b6f9c61de",
        "name": "",
        "filename": ".lumiring/air_cr/cards.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2450,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "424694b7b4f92b28",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "fillTable",
        "func": "// let card_options = RED.util.cloneMessage(global.get('card_options'))\nlet card_list = RED.util.cloneMessage(global.get('cards_settings'))\n\n\nlet schedule_list = global.get('schedule_list').list\nlet wrapper = {}\n\nfunction getScheduleNameById(id, schedule_list){\n    let instance = schedule_list.find(function (el) { return el.Shedule_id === id })\n\n    return instance.name\n}\n\nfunction getFormattedTime(unixTime) {\n\n    if (unixTime === \"0\" || unixTime === undefined){\n        return \"undefined\"\n    }\n    let months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    let d = new Date(parseInt(unixTime*1000));\n    let day = days[d.getDay()];\n    let hr = d.getHours();\n    let min = d.getMinutes();\n    if (min < 10) {\n        min = \"0\" + min;\n    }\n    let ampm = \"am\";\n    if (hr > 12) {\n        hr -= 12;\n        ampm = \"pm\";\n    }\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n    return hr + \":\" + min + \" \" + ampm + \" \" + date + \" \" + month + \" \" + year;\n}\n\n\n\ncard_list.list.forEach((el) => {\n    el.schedule_name = getScheduleNameById(el.schedule_id, schedule_list)\n    \n    el.init_time = getFormattedTime(el.init_time)\n    el.exp_time = getFormattedTime(el.exp_time)\n});\n\nwrapper.payload = card_list.list\n\n\n\n\nreturn wrapper;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 3340,
        "wires": [
            [
                "6f68a39d47cd50b8"
            ]
        ]
    },
    {
        "id": "59c57f766282c51a",
        "type": "complete",
        "z": "692c798b6f9c61de",
        "name": "",
        "scope": [
            "bc7c61c3c8b31103",
            "2d05b64d67f91304"
        ],
        "uncaught": false,
        "x": 130,
        "y": 3340,
        "wires": [
            [
                "424694b7b4f92b28"
            ]
        ]
    },
    {
        "id": "79dbb34ebe4bacf8",
        "type": "inject",
        "z": "692c798b6f9c61de",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "x": 130,
        "y": 3380,
        "wires": [
            [
                "424694b7b4f92b28"
            ]
        ]
    },
    {
        "id": "9e27ed9e8aa7a88a",
        "type": "ui_template",
        "z": "692c798b6f9c61de",
        "group": "523171b4c91e1d14",
        "name": "Del card",
        "order": 33,
        "width": 9,
        "height": 1,
        "format": "<style>\n    #deleteCardHeader{\n        text-align: left;\n        color: #0094CE;\n        font-size: 25px;\n        font-weight: 700\n    }\n</style>\n\n\n<div id=\"deleteCardHeader\">\n    Delete card\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 80,
        "y": 2720,
        "wires": [
            []
        ]
    },
    {
        "id": "ba0f83f8bb2f86ea",
        "type": "ui_template",
        "z": "692c798b6f9c61de",
        "group": "523171b4c91e1d14",
        "name": "Del Tip",
        "order": 38,
        "width": 17,
        "height": 2,
        "format": "<style>\n    #delTip {\n        display: flex;\n        flex-direction: column;\n        font-size: 25px;\n    }\n</style>\n\n<div id=\"delTip\">\n    <div>To delete cards information, click on the card row.</div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 80,
        "y": 2760,
        "wires": [
            []
        ]
    },
    {
        "id": "770b753a51e0e70a",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "checkInputReader",
        "func": "let info = global.get('cpoint_instance').info;\n\nreturn info;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2330,
        "y": 1180,
        "wires": [
            [
                "be089296ec3c54f0"
            ]
        ]
    },
    {
        "id": "be089296ec3c54f0",
        "type": "switch",
        "z": "692c798b6f9c61de",
        "name": "",
        "property": "input_reader",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2550,
        "y": 1160,
        "wires": [
            [
                "a902fb928a850e75"
            ],
            [
                "914448cec51bf657"
            ]
        ]
    },
    {
        "id": "914448cec51bf657",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "checkOutputReader",
        "func": "let info = global.get('cpoint_instance').info;\nreturn info;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2320,
        "y": 1220,
        "wires": [
            [
                "43686ad6c178d6ca"
            ]
        ]
    },
    {
        "id": "43686ad6c178d6ca",
        "type": "switch",
        "z": "692c798b6f9c61de",
        "name": "",
        "property": "output_reader",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2290,
        "y": 1280,
        "wires": [
            [
                "2027404e36d47db4"
            ],
            [
                "08d971dd14813356",
                "fd2158123fcacc98"
            ]
        ]
    },
    {
        "id": "8990bcfaab163a75",
        "type": "mqtt out",
        "z": "692c798b6f9c61de",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "79737e067a3af084",
        "x": 2330,
        "y": 920,
        "wires": []
    },
    {
        "id": "fd2158123fcacc98",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "done",
        "func": "let ackInfo = {}\n\nackInfo.result = \"success\"\nackInfo.payload = \"Done\"\n\nreturn ackInfo;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2650,
        "y": 1300,
        "wires": [
            [
                "3e1faa4820110952"
            ]
        ]
    },
    {
        "id": "3e1faa4820110952",
        "type": "ui_toast",
        "z": "692c798b6f9c61de",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Ack info",
        "x": 2940,
        "y": 1300,
        "wires": []
    },
    {
        "id": "87fae78443f92019",
        "type": "switch",
        "z": "692c798b6f9c61de",
        "name": "",
        "property": "result",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "error",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "success",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1970,
        "y": 920,
        "wires": [
            [
                "6c8acdd459e657eb"
            ],
            [
                "fdf6aa2ba915be6d"
            ]
        ]
    },
    {
        "id": "bc76cb99e8d741fc",
        "type": "switch",
        "z": "692c798b6f9c61de",
        "name": "",
        "property": "result",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "error",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "success",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1990,
        "y": 1360,
        "wires": [
            [
                "5e67349072bd813e"
            ],
            [
                "5e67349072bd813e",
                "08d971dd14813356"
            ]
        ]
    },
    {
        "id": "5e67349072bd813e",
        "type": "ui_toast",
        "z": "692c798b6f9c61de",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Ack info",
        "x": 2160,
        "y": 1340,
        "wires": []
    },
    {
        "id": "95a324f394b1cd4d",
        "type": "complete",
        "z": "692c798b6f9c61de",
        "name": "",
        "scope": [
            "160ef0c3c55613af"
        ],
        "uncaught": false,
        "x": 70,
        "y": 2940,
        "wires": [
            [
                "1c62bd8daee77ef6"
            ]
        ]
    },
    {
        "id": "9deb322bc7485df4",
        "type": "complete",
        "z": "692c798b6f9c61de",
        "name": "",
        "scope": [
            "cc2679d4506e3cb4"
        ],
        "uncaught": false,
        "x": 290,
        "y": 3880,
        "wires": [
            [
                "76533ef11dd633f8"
            ]
        ]
    },
    {
        "id": "76533ef11dd633f8",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 84",
        "func": "let instance = global.get(\"cpoint_instance\")\n\nmsg.enabled = instance.info.input_reader\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 3880,
        "wires": [
            [
                "249c8170bcc728a6",
                "a4f26692a416214e"
            ]
        ]
    },
    {
        "id": "da084ccca27b9a18",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 85",
        "func": "let instance = RED.util.cloneMessage(global.get(\"cpoint_instance\"))\nlet obj\nobj = {}\nif (instance.info.output_reader){\n    obj.enabled = true\n} else {\n    obj.enabled = false\n}\n\nreturn obj;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 4000,
        "wires": [
            [
                "fdf58eb0529e87d4",
                "7c1d7e49523a72de",
                "82d84b53c9ef14eb"
            ]
        ]
    },
    {
        "id": "138342efa9181f47",
        "type": "complete",
        "z": "692c798b6f9c61de",
        "name": "",
        "scope": [
            "6f5df0aece82fdd9"
        ],
        "uncaught": false,
        "x": 390,
        "y": 3940,
        "wires": [
            [
                "da084ccca27b9a18"
            ]
        ]
    },
    {
        "id": "01918502f2a0eba5",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 86",
        "func": "let instance = RED.util.cloneMessage(global.get(\"cpoint_instance\"))\nlet obj\nobj = {}\nif (instance.info.input_reader){\n    obj.enabled = true\n} else {\n    obj.enabled = false\n}\n\nreturn obj;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 4100,
        "wires": [
            [
                "84507c7374840699",
                "1049fe0d5aa63d8e",
                "5987ebc432c3d3bc"
            ]
        ]
    },
    {
        "id": "4880eb164fec560a",
        "type": "complete",
        "z": "692c798b6f9c61de",
        "name": "",
        "scope": [
            "6f5df0aece82fdd9"
        ],
        "uncaught": false,
        "x": 410,
        "y": 4040,
        "wires": [
            [
                "01918502f2a0eba5"
            ]
        ]
    },
    {
        "id": "2729add65fd2ae39",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 87",
        "func": "let main_settings_arr =  global.get('main_settings').list\nlet cpointName_list = []\n\nmain_settings_arr.forEach(function(element) {\n    cpointName_list.push({ [element.info.name]: element.device_set_idxs.Control_point_idx })\n});\n\n\nmsg.options = cpointName_list\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 3140,
        "wires": [
            [
                "daa51ac186123a53"
            ]
        ]
    },
    {
        "id": "dde4738b612e437a",
        "type": "complete",
        "z": "692c798b6f9c61de",
        "name": "",
        "scope": [
            "e95f3e2f8d4f89e4",
            "ff2307c110713c11",
            "08d971dd14813356"
        ],
        "uncaught": false,
        "x": 90,
        "y": 3140,
        "wires": [
            [
                "2729add65fd2ae39"
            ]
        ]
    },
    {
        "id": "daa51ac186123a53",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "name": "Control point",
        "label": "Control point",
        "tooltip": "",
        "place": "Select option",
        "group": "523171b4c91e1d14",
        "order": 45,
        "width": 11,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "control_point",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 430,
        "y": 3140,
        "wires": [
            [
                "06c80f09630e9c1f"
            ]
        ]
    },
    {
        "id": "66ee10e78404ba0f",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 88",
        "func": "let main_settings_arr =  global.get('main_settings').list\nlet cpointName_list = []\n\nmain_settings_arr.forEach(function(element) {\n    cpointName_list.push({ [element.info.name]: element.device_set_idxs.Control_point_idx })\n});\n\n\nmsg.options = cpointName_list\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1820,
        "wires": [
            [
                "9bd32b5b33db3136"
            ]
        ]
    },
    {
        "id": "b85b11b4099013a5",
        "type": "complete",
        "z": "692c798b6f9c61de",
        "name": "",
        "scope": [
            "e95f3e2f8d4f89e4",
            "ff2307c110713c11",
            "08d971dd14813356"
        ],
        "uncaught": false,
        "x": 190,
        "y": 1820,
        "wires": [
            [
                "66ee10e78404ba0f"
            ]
        ]
    },
    {
        "id": "9bd32b5b33db3136",
        "type": "ui_dropdown",
        "z": "692c798b6f9c61de",
        "name": "Control point",
        "label": "Control point",
        "tooltip": "",
        "place": "Select option",
        "group": "523171b4c91e1d14",
        "order": 14,
        "width": 11,
        "height": 1,
        "passthru": true,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "Ctp_idx",
        "topicType": "str",
        "className": "dropdown_input",
        "x": 590,
        "y": 1820,
        "wires": [
            [
                "1858ddfbf99a4971"
            ]
        ]
    },
    {
        "id": "cfdf6c6bef6b7a9a",
        "type": "moment",
        "z": "692c798b6f9c61de",
        "name": "",
        "topic": "init_time",
        "input": "payload",
        "inputType": "msg",
        "inTz": "Europe/Kiev",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "X",
        "locale": "en-US",
        "output": "payload",
        "outputType": "msg",
        "outTz": "ETC/GMT",
        "x": 360,
        "y": 3020,
        "wires": [
            [
                "06c80f09630e9c1f"
            ]
        ]
    },
    {
        "id": "38838693b9ddac8b",
        "type": "moment",
        "z": "692c798b6f9c61de",
        "name": "",
        "topic": "exp_time",
        "input": "payload",
        "inputType": "msg",
        "inTz": "Europe/Kiev",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "X",
        "locale": "en-US",
        "output": "payload",
        "outputType": "msg",
        "outTz": "ETC/GMT",
        "x": 360,
        "y": 3080,
        "wires": [
            [
                "06c80f09630e9c1f"
            ]
        ]
    },
    {
        "id": "7431ae8e36e04646",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "DelCard",
        "func": "let userCreds = global.get('userCreds');\nlet globalTopic = userCreds.location + \"/\" + userCreds.device_id + \"/\"\n\nlet key_id = msg.payload.key_id\nlet card_list = RED.util.cloneMessage(global.get('cards_settings')).list\n\nlet elem_to_del = card_list.find((el) => {\n    return el.key_id === key_id\n})\n\nlet new_card_list = card_list.filter((el) => {\n    return el.key_id !== key_id\n})\n\n\nfunction createKeySet(ctp_idx, schedule_id, key_id, key_hex, init, exp) {\n    return `${key_id};${ctp_idx};7;${key_hex};1;${schedule_id};1;0;-1;-1;-1;0;${init !== undefined ? init : \"0\"};${exp !== undefined ? exp : \"0\"};/`\n}\n\nfunction createCortege(arr) {\n    if (arr.length === 0) return \"\"\n    let str = \"/\"\n    arr.forEach((el) => {\n        str += createKeySet(el.control_point, el.schedule_id, el.key_id, el.key_hex, el.init_time, el.exp_time)\n    })\n    return str\n}\n\n\n\n\nlet msgWrapper = {}\nmsgWrapper.operator = \"SetCardKeys\"\nmsgWrapper.session_id = \"0\"\nmsgWrapper.message_id = Math.floor(Math.random() * 1692797271182).toString()\n\nmsgWrapper.info = {}\nmsgWrapper.info.Ctp_idx = elem_to_del.control_point\nmsgWrapper.info.KeysCount = new_card_list.length\nmsgWrapper.info.Keys = createCortege(new_card_list)\nmsgWrapper.info.KeysDataLength = msgWrapper.info.Keys.length\n\n\nmsg.payload = msgWrapper\nmsg.topic = globalTopic + \"Operate\" + \"/\"\nglobal.set('setCardMessId', msgWrapper.message_id)\nglobal.set('card_list_to_update', new_card_list)\nglobal.set('key_count', new_card_list.length)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 3280,
        "wires": [
            [
                "ccb4b2f8e2e0d3ed"
            ]
        ]
    },
    {
        "id": "05caf55bfe3725ef",
        "type": "complete",
        "z": "692c798b6f9c61de",
        "name": "",
        "scope": [
            "cd3e41f3d6b01780"
        ],
        "uncaught": false,
        "x": 90,
        "y": 680,
        "wires": [
            [
                "b6d5d71c1bfb77a0"
            ]
        ]
    },
    {
        "id": "7fd7bed9e154358e",
        "type": "ui_table",
        "z": "692c798b6f9c61de",
        "group": "523171b4c91e1d14",
        "name": "",
        "order": 12,
        "width": 17,
        "height": 4,
        "columns": [
            {
                "field": "name",
                "title": "Daily shedule name",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "TmStart",
                "title": "From",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "TmEnd",
                "title": "To",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 450,
        "y": 2060,
        "wires": [
            [
                "872029bff6dbb4ca"
            ]
        ]
    },
    {
        "id": "f8374808cfeb9147",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "fillTable",
        "func": "let schedule_list = RED.util.cloneMessage(global.get('schedule_list').list)\nlet wrapper = {}\n\n\nfunction getFormattedTime(ut) {\n    const result = new Date(ut * 1000)\n        .toISOString()\n        .slice(11, 19)\n    return result\n}\n\nschedule_list.forEach((el) => {\n\n    el.TmStart = getFormattedTime(Number.parseInt(el.TmStart))\n    el.TmEnd = getFormattedTime(Number.parseInt(el.TmEnd))\n});\n\n\nwrapper.payload = schedule_list\n\n\nreturn wrapper;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 2060,
        "wires": [
            [
                "7fd7bed9e154358e"
            ]
        ]
    },
    {
        "id": "b17e2df925055d9f",
        "type": "ui_template",
        "z": "692c798b6f9c61de",
        "group": "523171b4c91e1d14",
        "name": "Del schedule",
        "order": 3,
        "width": 11,
        "height": 1,
        "format": "<style>\n    #deleteCardHeader{\n        text-align: left;\n        color: #0094CE;\n        font-size: 25px;\n        font-weight: 700\n    }\n</style>\n\n\n<div id=\"deleteCardHeader\">\n    Delete schedule\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 950,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "3b6af4cc1e2b6f8f",
        "type": "ui_template",
        "z": "692c798b6f9c61de",
        "group": "523171b4c91e1d14",
        "name": "Del Tip",
        "order": 7,
        "width": 17,
        "height": 3,
        "format": "<style>\n    #delTip {\n        display: flex;\n        flex-direction: column;\n        font-size: 25px;\n    }\n</style>\n\n<div id=\"delTip\">\n    <div>To delete schedule information, click on the schedule row.</div>\n    <div>All cards linked to the deleted schedule will become inactive.</div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 940,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "0f14ad530864c6cb",
        "type": "complete",
        "z": "692c798b6f9c61de",
        "name": "",
        "scope": [
            "092fbd16dc09d3e3",
            "2e01a9fd66ae5e18"
        ],
        "uncaught": false,
        "x": 90,
        "y": 500,
        "wires": [
            [
                "5e76e13f8720948e"
            ]
        ]
    },
    {
        "id": "599d6cdc7162b6ea",
        "type": "complete",
        "z": "692c798b6f9c61de",
        "name": "",
        "scope": [
            "f60fe4acd866cd02",
            "9316588f6e7f3466"
        ],
        "uncaught": false,
        "x": 110,
        "y": 2060,
        "wires": [
            [
                "f8374808cfeb9147"
            ]
        ]
    },
    {
        "id": "872029bff6dbb4ca",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "DelSchedule",
        "func": "let userCreds = global.get('userCreds');\nlet globalTopic = userCreds.location + \"/\" + userCreds.device_id + \"/\"\n\nlet Shedule_id = msg.payload.Shedule_id\nlet schedule_list = RED.util.cloneMessage(global.get('schedule_list')).list\n\n\n\nlet elem_to_del = schedule_list.find((el) => {\n    return el.Shedule_id === Shedule_id\n})\n\n\n\n\nlet new_schedule_list = schedule_list.filter((el) => {\n    return el.Shedule_id !== Shedule_id\n})\n\n\n\n\n\n\n\nlet msgWrapper = {}\nmsgWrapper.operator = \"DelSdlDaily\"\nmsgWrapper.session_id = \"0\"\nmsgWrapper.message_id = Math.floor(Math.random() * 1692797271182).toString()\n\nmsgWrapper.info = {}\nmsgWrapper.info.Ctp_idx = elem_to_del.Ctp_idx\nmsgWrapper.info.Shedule_id = Shedule_id\n\n\nmsg.payload = msgWrapper\nmsg.topic = globalTopic + \"Operate\" + \"/\"\n\nglobal.set('messageId', msgWrapper.message_id)\n\n\nglobal.set('schedule_list_to_update', new_schedule_list)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 2060,
        "wires": [
            [
                "c6f8198164b0ed6e"
            ]
        ]
    },
    {
        "id": "746bb3e6d6acd877",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "handleDelSchedule",
        "func": "let messageId = global.get(\"messageId\")\n\nif (messageId === msg.payload.message_id) {\n    let ackInfo = {}\n    if (msg.payload.result.errorNo === 0) {\n\n        ackInfo.result = \"success\"\n        ackInfo.payload = \"Done\"\n    } else {\n\n        ackInfo.result = \"error\"\n        ackInfo.payload = \"Error\"\n    }\n    return ackInfo;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 1580,
        "wires": [
            [
                "c4101cd3edf7986e"
            ]
        ]
    },
    {
        "id": "c4101cd3edf7986e",
        "type": "switch",
        "z": "692c798b6f9c61de",
        "name": "",
        "property": "result",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "success",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "error",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1950,
        "y": 1560,
        "wires": [
            [
                "2e01a9fd66ae5e18",
                "ab9407c55052fb9e"
            ],
            [
                "ab9407c55052fb9e"
            ]
        ]
    },
    {
        "id": "2e01a9fd66ae5e18",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 89",
        "func": "let obj = {}\nobj.payload = {}\nobj.payload.list = global.get(\"schedule_list_to_update\");\n\n\n\n\n\nreturn obj",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2130,
        "y": 1480,
        "wires": [
            [
                "f6dffb08204572bf"
            ]
        ]
    },
    {
        "id": "4082901c2d4ff549",
        "type": "debug",
        "z": "692c798b6f9c61de",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 440,
        "wires": []
    },
    {
        "id": "dddcbff327856641",
        "type": "ui_button",
        "z": "692c798b6f9c61de",
        "name": "Delete control point",
        "group": "b5b06fdb86579748",
        "order": 3,
        "width": 9,
        "height": 1,
        "passthru": false,
        "label": "Delete control point",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "red",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 230,
        "y": 4440,
        "wires": [
            [
                "3be035a39318e6f5"
            ]
        ]
    },
    {
        "id": "3be035a39318e6f5",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 90",
        "func": "\nlet userCreds = global.get('userCreds');\nlet globalTopic = userCreds.location + \"/\" + userCreds.device_id + \"/\"\nlet cpoint_instance = RED.util.cloneMessage(global.get('cpoint_instance'))\n\nlet main_settings_arr = RED.util.cloneMessage(global.get('main_settings').list)\n\n\nlet new_arr = main_settings_arr.filter((el) => {\n    return el.device_set_idxs.Control_point_idx !== cpoint_instance.device_set_idxs.Control_point_idx\n})\n\n\nlet msgWrapper = {}\nmsgWrapper.operator = \"DelCtpDoor\"\nmsgWrapper.session_id = \"0\"\nmsgWrapper.message_id = Math.floor(Math.random() * 1692797271182).toString();\nmsgWrapper.info = {}\nmsgWrapper.info.Control_point_idx = cpoint_instance.device_set_idxs.Control_point_idx\n\nmsg.payload = msgWrapper\nmsg.topic = globalTopic + \"Operate\" + \"/\"\n\nglobal.set('messageId', msgWrapper.message_id)\nglobal.set(\"ctp_door_to_update\", new_arr)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 4500,
        "wires": [
            [
                "6996e160e06270ca"
            ]
        ]
    },
    {
        "id": "6996e160e06270ca",
        "type": "mqtt out",
        "z": "692c798b6f9c61de",
        "name": "",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "79737e067a3af084",
        "x": 350,
        "y": 4500,
        "wires": []
    },
    {
        "id": "e3ba3b33e28af4c1",
        "type": "ui_toast",
        "z": "692c798b6f9c61de",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Ack info",
        "x": 2180,
        "y": 1580,
        "wires": []
    },
    {
        "id": "ba7550833636a73b",
        "type": "switch",
        "z": "692c798b6f9c61de",
        "name": "",
        "property": "result",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "success",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "error",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1990,
        "y": 1680,
        "wires": [
            [
                "cd3e41f3d6b01780",
                "4c5d44476d630125"
            ],
            [
                "4c5d44476d630125"
            ]
        ]
    },
    {
        "id": "c61ecea6ed433bf2",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "handleDelCtpDoor-Ack",
        "func": "let messageId = global.get(\"messageId\")\n\nif (messageId === msg.payload.message_id) {\n    let ackInfo = {}\n    if (msg.payload.result.errorNo === 0) {\n\n        ackInfo.result = \"success\"\n        ackInfo.payload = \"Done\"\n    } else {\n\n        ackInfo.result = \"error\"\n        ackInfo.payload = \"error\"\n    }\n    return ackInfo;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 980,
        "wires": [
            [
                "ad0bfe6a7a5bfe4d"
            ]
        ]
    },
    {
        "id": "ad0bfe6a7a5bfe4d",
        "type": "switch",
        "z": "692c798b6f9c61de",
        "name": "",
        "property": "result",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "error",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "success",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1970,
        "y": 980,
        "wires": [
            [
                "b54658fbb208ac5b"
            ],
            [
                "acfa78350ae5a985",
                "b54658fbb208ac5b"
            ]
        ]
    },
    {
        "id": "acfa78350ae5a985",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "persist_del_MainSettings",
        "func": "let obj = {}\nobj.payload = {}\n\nobj.payload.list = global.get(\"ctp_door_to_update\");\nglobal.set('main_settings', obj.payload)\n\n\n\n\n\n\nreturn obj",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 1060,
        "wires": [
            [
                "6d92a92327be827c"
            ]
        ]
    },
    {
        "id": "b54658fbb208ac5b",
        "type": "ui_toast",
        "z": "692c798b6f9c61de",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Ack info",
        "x": 2180,
        "y": 980,
        "wires": []
    },
    {
        "id": "6d92a92327be827c",
        "type": "file",
        "z": "692c798b6f9c61de",
        "name": "",
        "filename": ".lumiring/air_cr/main_settings.json",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 2400,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "9b6e645c76e64b92",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "function 91",
        "func": "let cpoint_idx = msg.payload\nlet cpoint_instance;\nlet obj = {}\n\nif (cpoint_idx === 0 || cpoint_idx === undefined) {\n    obj.enabled = false\n} else {\n    obj.enabled = true\n}\n\nreturn obj",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 4300,
        "wires": [
            [
                "dddcbff327856641"
            ]
        ]
    },
    {
        "id": "5922b6615afa47c9",
        "type": "inject",
        "z": "692c798b6f9c61de",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 70,
        "y": 4360,
        "wires": [
            [
                "9b6e645c76e64b92"
            ]
        ]
    },
    {
        "id": "e9402f88b2021140",
        "type": "ui_text-input",
        "z": "692c798b6f9c61de",
        "action": "set",
        "actionType": "str",
        "write": "payload",
        "writeType": "msg",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "fc491a4cada0492f",
        "order": 44,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "change": true,
        "delay": 300,
        "topic": "",
        "x": 180,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "8a6143d895605137",
        "type": "ui_text-input",
        "z": "692c798b6f9c61de",
        "action": "set",
        "actionType": "str",
        "write": "payload",
        "writeType": "msg",
        "name": "schedule_start",
        "label": "schedule_start",
        "tooltip": "",
        "group": "523171b4c91e1d14",
        "order": 16,
        "width": 5,
        "height": 2,
        "passthru": true,
        "mode": "time",
        "change": true,
        "delay": 300,
        "topic": "TmStart",
        "x": 340,
        "y": 1740,
        "wires": [
            [
                "896c9a7874fa9d36"
            ]
        ]
    },
    {
        "id": "871eb270d8598cce",
        "type": "ui_text-input",
        "z": "692c798b6f9c61de",
        "action": "set",
        "actionType": "str",
        "write": "payload",
        "writeType": "msg",
        "name": "schedule_end",
        "label": "schedule_end",
        "tooltip": "",
        "group": "523171b4c91e1d14",
        "order": 18,
        "width": 5,
        "height": 2,
        "passthru": true,
        "mode": "time",
        "change": true,
        "delay": 300,
        "topic": "TmEnd",
        "x": 340,
        "y": 1780,
        "wires": [
            []
        ]
    },
    {
        "id": "2c20c6b6c69caf14",
        "type": "ui_text_input",
        "z": "692c798b6f9c61de",
        "d": true,
        "name": "Start",
        "label": "Start",
        "tooltip": "",
        "group": "523171b4c91e1d14",
        "order": 24,
        "width": 5,
        "height": 2,
        "passthru": true,
        "mode": "time",
        "delay": 300,
        "topic": "TmStart",
        "sendOnBlur": true,
        "className": "text_input",
        "topicType": "str",
        "x": 290,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "896c9a7874fa9d36",
        "type": "function",
        "z": "692c798b6f9c61de",
        "name": "getSeconds",
        "func": "\nlet t = new Date(msg.payload)\nconsole.log(t.getUTCMilliseconds())\n\nreturn t.getUTCMilliseconds();",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1740,
        "wires": [
            [
                "9ea75ef50451a564"
            ]
        ]
    },
    {
        "id": "9ea75ef50451a564",
        "type": "debug",
        "z": "692c798b6f9c61de",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 1800,
        "wires": []
    }
]